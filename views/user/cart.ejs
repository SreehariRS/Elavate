<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://kit.fontawesome.com/bdf5ca2238.js" crossorigin="anonymous"></script>
</head>
<body>
                <style>
        /* Your CSS styles here */
        body {
                font-family: Arial, sans-serif;
                background-color: #1c1b1b;
                margin: 0;
                padding: 0;
            }
            @import url('https://fonts.googleapis.com/css?family=Roboto:400,500,700');
*
{
    -webkit-box-sizing: border-box;
            box-sizing: border-box;
    margin: 0;
    padding: 0;
}
body {
    padding-top: 56px; /* Adjust based on the height of your navbar */
    font-family: 'Poppins', sans-serif;
    margin: 0;
    padding: 0;
    /* display: flex; */
    
}





.section-padding{
    padding: 100px 0; 
    }

            .cart {
                max-width: 800px;
                margin: 90px auto;
                background-color: #fff;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            .home-link {
            display: inline-block;
            padding: 10px 20px;
            margin: 10px 20px;
            text-decoration: none;
            color: #080808;
            background-color: #00000000;
            border-radius: 10px;
            transition: background-color 1s, color 2s;
        }

        .home-link:hover {
            background-color: #0000006d;
            color: rgb(255, 255, 255);
        }

            .cart-title {
                padding: 20px;
                font-size: 1.5rem;
                font-weight: bold;
                border-bottom: 1px solid #ccc;
            }

            .cart-table {
                width: 100%;
                border-collapse: collapse;
            }

            .cart-table th,
            .cart-table td {
                padding: 15px;
                text-align: left;
                border-bottom: 1px solid #eee;
            }

            .cart-table th:first-child,
            .cart-table td:first-child {
                padding-left: 20px;
            }

            .cart-table th:last-child,
            .cart-table td:last-child {
                padding-right: 20px;
            }

            .product-image {
                max-width: 80px;
                max-height: 80px;
                border-radius: 4px;
            }

            .quantity-input {
                width: 60px;
                padding: 5px;
                border: 1px solid #ccc;
                border-radius: 4px;
                text-align: center;
            }

            .remove-btn {
                padding: 8px 15px;
                background-color: #ff4c57;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            .remove-btn:hover {
                background-color: #d1404a;
            }
.cart-footer {
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
}

            .total-price {
                font-size: 1.2rem;
                font-weight: bold;
            }

            .checkout-btn {
                padding: 12px 25px;
                background-color: #4caf50;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            .checkout-btn:hover {
                background-color: #45a049;
            }

            .empty-cart-message {
                text-align: center;
                padding: 20px;
                display: none;
                animation: fadeIn 0.5s ease-out forwards;
            }

            @keyframes fadeIn {
                from {
                    opacity: 0;
                }
                to {
                    opacity: 1;
                }
            }

            .shop-now-btn {
                padding: 10px 20px;
                background-color: #ff4c57;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
                animation: slideIn 0.5s ease-out forwards;
            }

            .shop-now-btn:hover {
                background-color: #d1404a;
            }

            @keyframes slideIn {
                from {
                    transform: translateY(50px);
                    opacity: 0;
                }
                to {
                    transform: translateY(0);
                    opacity: 1;
                }
            }
            .custom-swal-container {
            font-family: 'Roboto', sans-serif;
        }
        .custom-swal-title {
            color: #3085d6;
            font-size: 24px;
        }
        .custom-swal-text {
            color: #777;
            font-size: 16px;
        }
        .custom-swal-confirm-button {
            background-color: #3085d6;
            color: #fff;
            border: none;
            cursor: pointer;
        }
        .custom-swal-cancel-button {
            background-color: #d33;
            color: #fff;
            border: none;
            cursor: pointer;
        }
            
        .quantity-btn {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 50%;
        cursor: pointer;
        display: inline-block;
        width: 20px;
        height: 20px;
        text-align: center;
        line-height: 20px;
        font-size: 14px;
    }

    .quantity-btn:hover {
        background-color: #f0f0f0;
    }
    .cart {
    position: relative;
    top: -35px; /* Adjust this value as needed */
}
.back-button {
    position: absolute;
    top: 85px;
    left: 80px;
    z-index: 1000; /* Ensure the button is above other elements */
}

.back-button a {
    font-size: 24px; /* Increase the font size of the icon */
    padding: 10px; /* Add some padding around the icon */
    color: #000; /* Adjust the color as needed */
    text-decoration: none;
}

.back-button a:hover {
    color: #333; /* Change the color on hover */
}
    </style>

    <%- include('nav2') %>

    <div class="back-button">
        <a href="javascript:history.back()"><i class="fas fa-arrow-left"></i></a>
    </div>
    <div class="cart">
        <div class="cart-title">Shopping Cart</div>
        <div class="empty-cart-message" style="display: none;">
            Your cart is empty. <a href="/" class="shop-now-btn" style="text-decoration: none;">Shop Now</a>
        </div>
        <% if (!cart || cart.items.length === 0) { %>
            <script>
                document.addEventListener("DOMContentLoaded", function() {
                    const emptyMsg = document.querySelector('.empty-cart-message');
                    if (emptyMsg) emptyMsg.style.display = 'block';
                });
            </script>
        <% } else { %>
        <table class="cart-table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody class="cart-items">
                <% cart.items.forEach(item => { %>
                    <% if (item.productId) { %>
                    <tr id="row_<%= item.productId._id %>">
                        <td><img src="<%= item.productId.productImages[0] %>" alt="<%= item.productId.name || 'Product Image' %>" class="product-image" /></td>
                        <td><%= item.productId.name || 'Unknown Product' %></td>
                        <td>
                            <% const price = item.productId.offerprice || item.productId.price || 0; %>
                            ₹<%= price.toFixed(2) %>
                        </td>
                        <td class="quantity-cell">
                            <button class="quantity-btn quantity-minus" data-product-id="<%= item.productId._id %>" data-price="<%= price %>">
                                <i class="fas fa-minus"></i>
                            </button>
                            <input type="number" class="quantity-input" id="quantity_<%= item.productId._id %>" value="<%= item.quantity %>" min="1" max="<%= item.productId.stock %>" data-prev-value="<%= item.quantity %>">
                            <button class="quantity-btn quantity-plus" data-product-id="<%= item.productId._id %>" data-price="<%= price %>">
                                <i class="fas fa-plus"></i>
                            </button>
                        </td>
                        <td class="subtotal">₹<span id="subtotal_<%= item.productId._id %>"><%= (price * item.quantity).toFixed(2) %></span></td>
                        <td>
                            <button class="remove-btn" data-product-id="<%= item.productId._id %>" data-price="<%= price %>">Remove</button>
                        </td>
                    </tr>
                    <% } %>
                <% }) %>
            </tbody>
        </table>
        <div class="cart-footer">
            <div class="total-price">Total: ₹<span class="cart-total" id="cart-total"><%= totalPrice.toFixed(2) %></span></div>
            <a href="#" onclick="handleCheckout()"><button class="checkout-btn">Checkout</button></a>
        </div>
        <% } %>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function handleCheckout() {
            const cartTotal = parseFloat(document.getElementById("cart-total")?.innerText || 0);
            if (cartTotal === 0) {
                Swal.fire({
                    title: 'Oops!',
                    text: 'Please select a product before checking out.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            } else {
                window.location.href = "/checkout";
            }
        }

        function updateQuantity(productId, quantity, price) {
            const inputField = document.getElementById(`quantity_${productId}`);
            if (!inputField) return;

            const maxStock = parseInt(inputField.getAttribute('max'));
            const prevValue = parseInt(inputField.dataset.prevValue) || 1;

            if (isNaN(quantity) || quantity < 1) {
                Swal.fire({
                    title: 'Error',
                    text: 'Quantity must be a positive number.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                inputField.value = prevValue;
                updateSubtotalAndTotal(productId, prevValue, price);
                return;
            }

            if (quantity > maxStock) {
                Swal.fire({
                    title: 'Error',
                    text: 'Maximum stock limit reached',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                inputField.value = maxStock;
                updateSubtotalAndTotal(productId, maxStock, price);
                return;
            }

            fetch('/updateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}, message: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("Server response:", data);
                if (data.success) {
                    const updatedItem = data.cart.items.find(item => item.productId._id.toString() === productId);
                    if (updatedItem) {
                        inputField.value = updatedItem.quantity;
                        inputField.dataset.prevValue = updatedItem.quantity;
                        updateSubtotalAndTotal(productId, updatedItem.quantity, price);
                    } else {
                        throw new Error("Updated item not found in response");
                    }
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: data.message || 'Failed to update quantity',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    inputField.value = prevValue;
                    updateSubtotalAndTotal(productId, prevValue, price);
                }
            })
            .catch(error => {
                console.error('Error updating quantity:', error);
                Swal.fire({
                    title: 'Error',
                    text: `An error occurred while updating quantity: ${error.message}`,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                inputField.value = prevValue;
                updateSubtotalAndTotal(productId, prevValue, price);
            });
        }

        function decreaseQuantity(event) {
            try {
                const button = event.target.closest('button');
                if (!button) return;
                
                const productId = button.dataset.productId;
                const price = parseFloat(button.dataset.price);
                const inputField = document.getElementById(`quantity_${productId}`);
                
                if (!inputField || !productId) return;

                let newValue = parseInt(inputField.value) - 1;
                newValue = newValue < 1 ? 1 : newValue;
                inputField.value = newValue;
                updateQuantity(productId, newValue, price);
            } catch (error) {
                console.error('Error in decreaseQuantity:', error);
            }
        }

        function increaseQuantity(event) {
            try {
                const button = event.target.closest('button');
                if (!button) return;
                
                const productId = button.dataset.productId;
                const price = parseFloat(button.dataset.price);
                const inputField = document.getElementById(`quantity_${productId}`);
                
                if (!inputField || !productId) return;

                const maxStock = parseInt(inputField.getAttribute('max'));
                let newValue = parseInt(inputField.value) + 1;

                if (newValue > maxStock) {
                    Swal.fire({
                        title: 'Error',
                        text: 'Maximum stock limit reached',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                inputField.value = newValue;
                updateQuantity(productId, newValue, price);
            } catch (error) {
                console.error('Error in increaseQuantity:', error);
            }
        }

        function removeFromCart(event) {
            const button = event.target.closest('button');
            if (!button) return;
            
            const productId = button.dataset.productId;
            const price = parseFloat(button.dataset.price);
            
            if (!productId) return;
            
            Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to remove this product from your cart.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/removeFromCart/${productId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}, message: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const rowElement = document.getElementById(`row_${productId}`);
                            if (rowElement) {
                                rowElement.remove();
                            }
                            
                            // Force recalculation of total
                            setTimeout(() => {
                                try {
                                    const subtotals = document.querySelectorAll(".subtotal span");
                                    let total = 0;
                                    
                                    if (subtotals && subtotals.length > 0) {
                                        subtotals.forEach(subtotal => {
                                            if (subtotal && subtotal.innerText) {
                                                const value = parseFloat(subtotal.innerText) || 0;
                                                total += value;
                                            }
                                        });
                                    }
                                    
                                    const totalPriceElement = document.getElementById("cart-total");
                                    if (totalPriceElement) {
                                        totalPriceElement.innerText = total.toFixed(2);
                                    }
                                    
                                    const cartItemsContainer = document.querySelector(".cart-items");
                                    const hasItems = cartItemsContainer && cartItemsContainer.children.length > 0;
                                    
                                    if (!hasItems) {
                                        const emptyMsg = document.querySelector(".empty-cart-message");
                                        const cartFooter = document.querySelector(".cart-footer");
                                        const cartTable = document.querySelector(".cart-table");
                                        
                                        if (emptyMsg) emptyMsg.style.display = "block";
                                        if (cartFooter) cartFooter.style.display = "none";
                                        if (cartTable) cartTable.style.display = "none";
                                    }
                                } catch (error) {
                                    console.error("Error updating cart after removal:", error);
                                }
                            }, 100);
                            
                            Swal.fire({
                                title: 'Removed!',
                                text: 'The product has been removed from your cart.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: 'Failed to remove product from cart',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error removing product:', error);
                        Swal.fire({
                            title: 'Error',
                            text: `Failed to remove product from cart: ${error.message}`,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
                }
            });
        }

        function updateSubtotalAndTotal(productId, quantity, price) {
            // Only update subtotal if productId and elements exist
            if (productId && quantity !== undefined && price !== undefined) {
                const subtotalElement = document.getElementById(`subtotal_${productId}`);
                if (subtotalElement) {
                    const newSubtotal = (price * quantity).toFixed(2);
                    subtotalElement.innerText = newSubtotal;
                }
            }

            // Calculate total from all visible subtotals
            const subtotals = document.querySelectorAll(".subtotal span");
            let total = 0;
            
            if (subtotals && subtotals.length > 0) {
                subtotals.forEach(subtotal => {
                    if (subtotal && subtotal.innerText) {
                        const value = parseFloat(subtotal.innerText) || 0;
                        total += value;
                    }
                });
            }
            
            // Update total display
            const totalPriceElement = document.getElementById("cart-total");
            if (totalPriceElement) {
                totalPriceElement.innerText = total.toFixed(2);
            }
            
            // Handle empty cart display
            try {
                const emptyMsg = document.querySelector(".empty-cart-message");
                const cartFooter = document.querySelector(".cart-footer");
                const cartTable = document.querySelector(".cart-table");
                const cartItemsContainer = document.querySelector(".cart-items");
                
                // Check if cart is actually empty
                const hasItems = cartItemsContainer && cartItemsContainer.children.length > 0;
                
                if (!hasItems || total === 0) {
                    if (emptyMsg) emptyMsg.style.display = "block";
                    if (cartFooter) cartFooter.style.display = "none";
                    if (cartTable) cartTable.style.display = "none";
                } else {
                    if (emptyMsg) emptyMsg.style.display = "none";
                    if (cartFooter) cartFooter.style.display = "block";
                    if (cartTable) cartTable.style.display = "table";
                }
            } catch (error) {
                console.error("Error updating cart display:", error);
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll('.quantity-minus').forEach(button => {
                button.addEventListener('click', decreaseQuantity);
            });
            document.querySelectorAll('.quantity-plus').forEach(button => {
                button.addEventListener('click', increaseQuantity);
            });
            document.querySelectorAll('.remove-btn').forEach(button => {
                button.addEventListener('click', removeFromCart);
            });

            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('change', function() {
                    try {
                        const productId = this.id.replace('quantity_', '');
                        const row = this.closest('tr');
                        if (!row) return;
                        
                        const priceCell = row.querySelector('td:nth-child(3)');
                        if (priceCell && priceCell.innerText) {
                            const price = parseFloat(priceCell.innerText.replace('₹', ''));
                            if (!isNaN(price)) {
                                updateQuantity(productId, this.value, price);
                            }
                        }
                    } catch (error) {
                        console.error('Error in quantity input change:', error);
                    }
                });
            });

            // Initial calculation with error handling
            try {
                const subtotals = document.querySelectorAll(".subtotal span");
                let total = 0;
                
                if (subtotals && subtotals.length > 0) {
                    subtotals.forEach(subtotal => {
                        if (subtotal && subtotal.innerText) {
                            const value = parseFloat(subtotal.innerText) || 0;
                            total += value;
                        }
                    });
                }
                
                const totalPriceElement = document.getElementById("cart-total");
                if (totalPriceElement) {
                    totalPriceElement.innerText = total.toFixed(2);
                }
            } catch (error) {
                console.error('Error in initial calculation:', error);
            }
        });
    </script>
</body>
</html>