<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Checkout | ELAVATE</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/stylesheet/user/checkout.css" />
</head>
<body>
    <div class="checkout-wrapper">
        <!-- Header -->
        <header class="checkout-header">
            <div class="back-button">
                <a href="javascript:history.back()"><i class="fas fa-arrow-left"></i> Back</a>
            </div>
            <div class="header-logo">
                <h1 id="elavate">ELAVATE</h1>
            </div>
            <div class="profile-icon">
                <i class="fas fa-user"></i>
            </div>
        </header>

        <!-- Main Content -->
        <main class="checkout-content">
            <div class="container">
                <h1 class="page-title">Checkout</h1>
                
                <% if (errorMessage) { %>
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <%= errorMessage %>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <% } %>

                <div class="checkout-grid">
                    <!-- Left Column - Forms -->
                    <div class="checkout-forms">
                        <!-- Address Section -->
                        <section class="checkout-card">
                            <div class="card-header">
                                <h3><i class="fas fa-map-marker-alt"></i> Delivery Address</h3>
                            </div>
                            <div class="card-body">
                                <% if (addresses.length === 0) { %>
                                <div class="no-data-message">
                                    <i class="fas fa-exclamation-circle"></i>
                                    <p>No addresses available. Please add an address.</p>
                                </div>
                                <% } else { %>
                                <div class="form-group">
                                    <label for="address">Select Delivery Address</label>
                                    <select class="form-control custom-select" id="address" name="selectedAddress">
                                        <option value="" selected disabled>Select an address</option>
                                        <% addresses.forEach(address => { %>
                                        <option
                                            value="<%= address.addressType %> - <%= address.district %>, <%= address.state %>, <%= address.flat %>, <%= address.pincode %>, <%= address.country %>, <%= address.mobileNumber %>"
                                        >
                                            <%= address.addressType %> - <%= address.district %>, <%= address.state %>, <%= address.flat
                                            %>, <%= address.pincode %>, <%= address.country %>, <%= address.mobileNumber %>
                                        </option>
                                        <% }) %>
                                    </select>
                                </div>
                                <% } %>
                                <button
                                    type="button"
                                    class="btn btn-outline-primary btn-block add-address-button"
                                    data-toggle="modal"
                                    data-target="#addAddressModal"
                                >
                                    <i class="fas fa-plus"></i> Add New Address
                                </button>
                            </div>
                        </section>

                        <!-- Payment Options -->
                        <section class="checkout-card">
                            <div class="card-header">
                                <h3><i class="fas fa-credit-card"></i> Payment Method</h3>
                            </div>
                            <div class="card-body">
                                <div class="payment-options">
                                    <div class="payment-option">
                                        <input type="radio" id="cashOnDelivery" name="paymentMethod" value="Cash On Delivery" class="payment-input" />
                                        <label for="cashOnDelivery" class="payment-label">
                                            <div class="payment-icon">
                                                <i class="fas fa-money-bill-wave"></i>
                                            </div>
                                            <div class="payment-details">
                                                <span class="payment-title">Cash On Delivery</span>
                                                <span class="payment-desc">Pay when you receive your order</span>
                                            </div>
                                        </label>
                                    </div>
                                    
                                    <div class="payment-option">
                                        <input type="radio" id="wallet" name="paymentMethod" value="wallet" class="payment-input" />
                                        <label for="wallet" class="payment-label">
                                            <div class="payment-icon">
                                                <i class="fas fa-wallet"></i>
                                            </div>
                                            <div class="payment-details">
                                                <span class="payment-title">Wallet Payment</span>
                                                <span class="payment-desc">Pay using your wallet balance</span>
                                            </div>
                                        </label>
                                    </div>
                                    
                                    <div class="payment-option">
                                        <input type="radio" id="razorPay" name="paymentMethod" value="Razor Pay" class="payment-input" />
                                        <label for="razorPay" class="payment-label">
                                            <div class="payment-icon">
                                                <i class="fas fa-credit-card"></i>
                                            </div>
                                            <div class="payment-details">
                                                <span class="payment-title">Razor Pay</span>
                                                <span class="payment-desc">Secure online payment</span>
                                            </div>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </section>

                        <!-- Coupon Section -->
                        <section class="checkout-card">
                            <div class="card-header">
                                <h3><i class="fas fa-tag"></i> Apply Coupon</h3>
                            </div>
                            <div class="card-body">
                                <div class="form-group">
                                    <label for="coupon">Select Coupon</label>
                                    <select class="form-control custom-select" id="coupon" name="coupon">
                                        <option value="" selected disabled>Select a coupon</option>
                                        <% coupons.forEach(coupon => { %>
                                        <option value="<%= coupon.code %>">
                                            <%= coupon.code %> (<%= coupon.discountValue %>% off)
                                        </option>
                                        <% }) %>
                                    </select>
                                </div>
                                <div class="coupon-actions">
                                    <button class="btn btn-outline-secondary" type="button" onclick="applyCoupon()" id="applyCouponBtn">
                                        Apply Coupon
                                    </button>
                                    <button
                                        type="button"
                                        class="btn btn-secondary"
                                        id="removeCouponBtn"
                                        style="display: none"
                                        onclick="removeCoupon()"
                                    >
                                        Remove Coupon
                                    </button>
                                </div>
                            </div>
                        </section>
                    </div>

                    <!-- Right Column - Summary -->
                    <div class="checkout-summary">
                        <!-- Order Summary -->
                        <section class="summary-card">
                            <div class="card-header">
                                <h3><i class="fas fa-receipt"></i> Order Summary</h3>
                            </div>
                            <div class="card-body">
                                <div class="order-items">
                                    <% if (cartItems.length === 0) { %>
                                    <div class="no-data-message">
                                        <i class="fas fa-shopping-cart"></i>
                                        <p>Your cart is empty.</p>
                                    </div>
                                    <% } else { %>
                                    <% cartItems.forEach(item => { %> 
                                    <% if (item.productId) { %>
                                    <div class="order-item">
                                        <div class="item-image">
                                            <% if (item.productId.productImages && item.productId.productImages.length > 0) { %>
                                            <img
                                                src="<%= item.productId.productImages[0] %>"
                                                alt="<%= item.productId.name || 'Product' %>"
                                            />
                                            <% } else { %>
                                            <img src="/img/default-product.jpg" alt="Default Product Image" />
                                            <% } %>
                                        </div>
                                        <div class="item-details">
                                            <h4 class="item-name"><%= item.productId.name || 'Unknown Product' %></h4>
                                            <p class="item-desc"><%= item.productId.description || 'No description available' %></p>
                                            <div class="item-meta">
                                                <span class="item-quantity">Qty: <%= item.quantity %></span>
                                                <span class="item-price">
                                                    <% const price = item.productId.offerprice || item.productId.price || 0; %> 
                                                    <% if (price > 0) { %> 
                                                    ₹<%= price.toFixed(2) %>
                                                    <% } else { %>
                                                    <span class="price-unavailable">Price unavailable</span>
                                                    <% } %>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <% } %> 
                                    <% }) %>
                                    <% } %>
                                </div>
                                
                       <div class="summary-totals">
    <div class="total-row">
        <span>Subtotal:</span>
        <span>₹<%= totalPrice %></span>
    </div>
    <div class="total-row">
        <span>Discount:</span>
        <span id="discountAmount">- ₹0.00</span>
    </div>
    <div class="total-row grand-total">
        <span>Total:</span>
        <span>₹<span id="totalPrice"><%= totalPrice %></span></span>
    </div>
</div>

                                <% if (cartItems.length > 0) { %>
                                <button class="btn btn-primary btn-lg btn-block checkout-btn" onclick="submitOrder()">
                                    Complete Purchase <i class="fas fa-lock"></i>
                                </button>
                                <% } else { %>
                                <button class="btn btn-primary btn-lg btn-block checkout-btn" disabled>
                                    Complete Purchase <i class="fas fa-lock"></i>
                                </button>
                                <% } %>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </main>

        <!-- Hidden Data Elements -->
        <div id="userData" data-user="<%= JSON.stringify(userData) %>"></div>
        <div id="cartItemsData" data-cart-items="<%= JSON.stringify(cartItems) %>"></div>

        <!-- Add Address Modal -->
        <div class="modal fade" id="addAddressModal" tabindex="-1" role="dialog" aria-labelledby="addAddressModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addAddressModalLabel">Add New Address</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form action="/Address" method="POST">
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label for="addressType">Address Type</label>
                                    <select name="addressType" class="form-control custom-select" required>
                                        <option value="home">Home</option>
                                        <option value="work">Work</option>
                                    </select>
                                </div>
                                <div class="form-group col-md-6">
                                    <label for="country">Country/Region</label>
                                    <input type="text" class="form-control" name="country" id="country" required />
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="mobileNumber">Mobile Number</label>
                                <input type="number" class="form-control" name="mobileNumber" id="mobileNumber" required />
                            </div>
                            <div class="form-group">
                                <label for="pincode">Pincode (6 digits)</label>
                                <input type="text" class="form-control" name="pincode" id="pincode" pattern="[0-9]{6}" required />
                            </div>
                            <div class="form-group">
                                <label for="flat">Full Address</label>
                                <input type="text" class="form-control" name="flat" id="flat" placeholder="Flat, House no., Building, Company, Apartment" required />
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label for="district">District</label>
                                    <input type="text" class="form-control" name="district" id="district" required />
                                </div>
                                <div class="form-group col-md-6">
                                    <label for="state">State</label>
                                    <input type="text" class="form-control" name="state" id="state" required />
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary btn-block">Save Address</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

        <script>
            const userData = JSON.parse(document.getElementById("userData")?.getAttribute("data-user") || "{}");
            const cartItems = JSON.parse(
                document.getElementById("cartItemsData")?.getAttribute("data-cart-items") || "[]"
            );
            let couponApplied = false;
            let originalPrice = parseFloat(document.getElementById("totalPrice")?.innerText || 0);

            if (isNaN(originalPrice)) {
                console.error("Original price is not a valid number");
                originalPrice = 0;
            }

            document.querySelector(".profile-icon")?.addEventListener("click", () => {
                window.location.href = "/profile";
            });

            document.getElementById("elavate")?.addEventListener("click", () => {
                window.location.href = "/";
            });

       async function applyCoupon() {
        if (couponApplied) {
            Swal.fire({
                icon: "info",
                title: "Coupon Already Applied",
                text: "A coupon has already been applied to this order.",
            });
            return;
        }

        const selectedCouponElement = document.getElementById("coupon");
        const couponCode = selectedCouponElement?.value;

        if (!couponCode) {
            Swal.fire({
                icon: "error",
                title: "No Coupon Selected",
                text: "Please select a coupon.",
            });
            return;
        }

        try {
            const response = await fetch("/validate-coupon", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ code: couponCode, cartTotal: originalPrice }),
            });
            
            if (!response.ok) throw new Error("Network response was not ok");
            const result = await response.json();

            if (result.success && result.coupon) {
                const { discountValue, discount } = result.coupon;
                if (isNaN(discount) || isNaN(discountValue)) {
                    throw new Error("Invalid coupon data received");
                }
                
                const discountedPrice = originalPrice - discount;
                const totalPriceElement = document.getElementById("totalPrice");
                const discountAmountElement = document.getElementById("discountAmount");
                
                if (totalPriceElement && discountAmountElement) {
                    totalPriceElement.innerText = discountedPrice.toFixed(2);
                    discountAmountElement.innerText = `- ₹${discount.toFixed(2)}`;
                    couponApplied = true;
                    document.getElementById("applyCouponBtn").disabled = true;
                    document.getElementById("removeCouponBtn").style.display = "inline-block";
                    
                    Swal.fire({
                        icon: "success",
                        title: "Coupon Applied",
                        text: `Coupon ${couponCode} applied successfully! You saved ₹${discount.toFixed(2)}.`,
                    });
                } else {
                    throw new Error("DOM elements not found");
                }
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Invalid Coupon",
                    text: result.message || "Please select a valid coupon.",
                });
            }
        } catch (error) {
            console.error("Error applying coupon:", error);
            Swal.fire({
                icon: "error",
                title: "Coupon Application Failed",
                text: "An error occurred while applying the coupon. Please try again.",
            });
        }
    }

    function removeCoupon() {
        if (!couponApplied) return;

        const totalPriceElement = document.getElementById("totalPrice");
        const discountAmountElement = document.getElementById("discountAmount");
        
        if (totalPriceElement && discountAmountElement) {
            totalPriceElement.innerText = originalPrice.toFixed(2);
            discountAmountElement.innerText = "- ₹0.00";
            couponApplied = false;
            document.getElementById("applyCouponBtn").disabled = false;
            document.getElementById("removeCouponBtn").style.display = "none";
            document.getElementById("coupon").value = "";
        } else {
            console.error("DOM elements not found for removing coupon");
        }
    }

            async function checkPaymentLockStatus() {
                try {
                    const response = await fetch("/check-payment-lock", {
                        method: "GET",
                        headers: { "Content-Type": "application/json" },
                    });

                    if (!response.ok) {
                        console.error("Failed to check payment lock status");
                        return false;
                    }

                    const result = await response.json();

                    if (result.isLocked) {
                        Swal.fire({
                            icon: "warning",
                            title: "Payment in Progress",
                            text: "Another payment is currently being processed. Please wait for it to complete or try again later.",
                            confirmButtonText: "OK",
                            timer: 5000,
                            timerProgressBar: true,
                        });
                        return true;
                    }
                    return false;
                } catch (error) {
                    console.error("Error checking payment lock:", error);
                    return false;
                }
            }

            async function submitOrder() {
                try {
                    // First check if payment is already locked
                    const isLocked = await checkPaymentLockStatus();
                    if (isLocked) {
                        return; // Exit if payment is locked
                    }

                    const selectedAddressElement = document.getElementById("address");
                    const selectedAddress = selectedAddressElement?.options[selectedAddressElement.selectedIndex]?.text;
                    if (!selectedAddress) {
                        Swal.fire({
                            icon: "error",
                            title: "No Address Selected",
                            text: "Please select a shipping address.",
                        });
                        return;
                    }

                    const paymentMethodElements = document.querySelectorAll('input[name="paymentMethod"]:checked');
                    if (paymentMethodElements.length !== 1) {
                        Swal.fire({
                            icon: "error",
                            title: "Invalid Payment Method",
                            text: "Please select exactly one payment method.",
                        });
                        return;
                    }

                    const paymentMethod = paymentMethodElements[0].value;
                    const selectedCouponElement = document.getElementById("coupon");
                    const couponCode = selectedCouponElement?.value;
                    const totalPrice = parseFloat(document.getElementById("totalPrice")?.innerText || 0);

                    if (isNaN(totalPrice)) {
                        throw new Error("Total price is not a valid number");
                    }

                    console.log("Submitting order:", { paymentMethod, totalPrice, couponCode, selectedAddress });

                    const orderData = {
                        selectedAddress,
                        paymentMethod,
                        couponCode: couponCode || null,
                        totalPrice,
                        cartItems: cartItems.map((item) => ({
                            productId: item.productId._id,
                            quantity: item.quantity,
                        })),
                    };

                    if (totalPrice > 1000 && paymentMethod === "Cash On Delivery") {
                        Swal.fire({
                            icon: "error",
                            title: "Cannot Proceed",
                            text: "Total amount exceeds ₹1000. Cash on Delivery is not available for amounts over ₹1000. Try Online payment.",
                        });
                        return;
                    }

                    if (paymentMethod === "wallet") {
                        // Check payment lock again before wallet processing
                        const walletLockCheck = await checkPaymentLockStatus();
                        if (walletLockCheck) {
                            return;
                        }

                        const walletCheckResponse = await fetch("/check-wallet", {
                            method: "GET",
                            headers: { "Content-Type": "application/json" },
                        });
                        if (!walletCheckResponse.ok) throw new Error("Wallet check failed");
                        const walletCheckResult = await walletCheckResponse.json();

                        if (!walletCheckResult.success || walletCheckResult.balance < totalPrice) {
                            Swal.fire({
                                icon: "error",
                                title: "Insufficient Wallet Balance",
                                text: "Top up your wallet or choose another payment method.",
                            });
                            return;
                        }

                        await submitOrderToServer(orderData);
                    } else if (paymentMethod === "Razor Pay") {
                        // Check payment lock again before Razorpay processing
                        const razorpayLockCheck = await checkPaymentLockStatus();
                        if (razorpayLockCheck) {
                            return;
                        }

                        const createOrderResponse = await fetch("/create-razorpay-order", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ amount: totalPrice }),
                        });

                        // Handle payment lock response (423 status)
                        if (createOrderResponse.status === 423) {
                            const errorResult = await createOrderResponse.json();
                            Swal.fire({
                                icon: "warning",
                                title: "Payment Already in Progress",
                                text:
                                    errorResult.message ||
                                    "Another payment is currently being processed. Please wait for it to complete or try again later.",
                                timer: 5000,
                                timerProgressBar: true,
                            });
                            return;
                        }

                        if (!createOrderResponse.ok) {
                            // Release lock if order creation fails
                            await releasePaymentLock();
                            throw new Error("Failed to create Razorpay order");
                        }

                        const createOrderResult = await createOrderResponse.json();

                        if (createOrderResult.error) {
                            // Release lock if there's an error
                            await releasePaymentLock();
                            Swal.fire({
                                icon: "error",
                                title: "Failed to Create Razorpay Order",
                                text: "Please try again later or choose a different payment method.",
                                timer: 3000,
                                timerProgressBar: true,
                            });
                            return;
                        }

                        const options = {
                            key: "rzp_test_rJ0yPg6ZIlUOvq",
                            amount: totalPrice * 100,
                            currency: "INR",
                            name: "Elavate",
                            description: "Payment for your order",
                            order_id: createOrderResult.id,
                            handler: async function (response) {
                                try {
                                    const verifyResponse = await fetch("/verify-razorpay-payment", {
                                        method: "POST",
                                        headers: { "Content-Type": "application/json" },
                                        body: JSON.stringify({
                                            paymentId: response.razorpay_payment_id,
                                            orderId: response.razorpay_order_id,
                                            signature: response.razorpay_signature,
                                        }),
                                    });

                                    if (!verifyResponse.ok) {
                                        await releasePaymentLock();
                                        throw new Error("Payment verification failed");
                                    }

                                    const verifyResult = await verifyResponse.json();

                                    if (verifyResult.success) {
                                        await fetch("/update-order-status", {
                                            method: "POST",
                                            headers: { "Content-Type": "application/json" },
                                            body: JSON.stringify({
                                                orderId: createOrderResult.id,
                                                paymentId: response.razorpay_payment_id,
                                                status: "confirmed",
                                                userId: "<%= userId %>",
                                                paymentMethod: "Razor Pay",
                                            }),
                                        });
                                        await submitOrderToServer(orderData);
                                    } else {
                                        await releasePaymentLock();
                                        orderData.paymentId = response.razorpay_payment_id;
                                        orderData.status = "paymentfailed";
                                        await submitOrderWithFailedPaymentToServer(orderData);
                                    }
                                } catch (error) {
                                    console.error("Error in payment handler:", error);
                                    await releasePaymentLock();
                                    Swal.fire({
                                        icon: "error",
                                        title: "Payment Processing Error",
                                        text: "An error occurred while processing your payment. Please try again.",
                                    });
                                }
                            },
                            prefill: {
                                name: userData.firstname || "Customer",
                                email: userData.email || "customer@example.com",
                                contact: userData.mobileNumber || "9999999999",
                            },
                            theme: {
                                color: "#A48F7A",
                            },
                            modal: {
                                ondismiss: async function () {
                                    // Payment modal was closed - release the lock
                                    console.log("Razorpay modal dismissed by user");
                                    await releasePaymentLock();

                                    // Show user-friendly message
                                    Swal.fire({
                                        icon: "info",
                                        title: "Payment Cancelled",
                                        text: "Payment was cancelled. You can try again whenever you're ready.",
                                        timer: 3000,
                                        timerProgressBar: true,
                                        showConfirmButton: false,
                                    });
                                },
                            },
                        };

                        const razorpayInstance = new Razorpay(options);

                        // Handle payment failure
                        razorpayInstance.on("payment.failed", async function (response) {
                            try {
                                console.log("Payment failed:", response);
                                await releasePaymentLock();

                                orderData.paymentId = response.razorpay_payment_id;
                                orderData.status = "paymentfailed";
                                await submitOrderWithFailedPaymentToServer(orderData);

                                Swal.fire({
                                    icon: "error",
                                    title: "Payment Failed",
                                    text:
                                        response.error.description ||
                                        "Your payment failed. The order has been recorded as pending.",
                                    timer: 3000,
                                    timerProgressBar: true,
                                }).then(() => {
                                    window.location.href = "/orderhistory";
                                });
                            } catch (error) {
                                console.error("Error handling payment failure:", error);
                                await releasePaymentLock();
                                Swal.fire({
                                    icon: "error",
                                    title: "Payment Processing Error",
                                    text: "An error occurred while processing the failed payment. Please check your order history.",
                                });
                            }
                        });

                        razorpayInstance.open();
                    } else {
                        // Cash on Delivery - no lock needed
                        await submitOrderToServer(orderData);
                    }
                } catch (error) {
                    console.error("Error during submitOrder:", error);
                    await releasePaymentLock(); // Release lock on any error
                    Swal.fire({
                        icon: "error",
                        title: "Checkout Failed",
                        text: "An error occurred during checkout. Please try again or contact support.",
                    });
                }
            }
            async function submitOrderToServer(orderData) {
                try {
                    const response = await fetch("/checkout", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(orderData),
                    });
                    if (!response.ok) throw new Error(`Order submission failed with status ${response.status}`);
                    const result = await response.json();
                    if (response.ok && result.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Order Placed",
                            text: "Your order has been successfully placed!",
                            timer: 2000,
                        }).then(() => {
                            window.location.href = result.redirect || "/orderhistory";
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Order Failed",
                            text: result.message || "Failed to place the order. Please try again.",
                        });
                    }
                } catch (error) {
                    console.error("Error in submitOrderToServer:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Server Error",
                        text: "An error occurred on the server. Please try again later.",
                    });
                }
            }
            async function releasePaymentLock() {
                try {
                    await fetch("/release-payment-lock", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ userId: "<%= userId %>" }),
                    });
                } catch (error) {
                    console.error("Error releasing payment lock:", error);
                }
            }

            async function submitOrderWithFailedPaymentToServer(orderData) {
                try {
                    const response = await fetch("/checkouterror", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(orderData),
                    });
                    if (!response.ok)
                        throw new Error(`Failed payment submission failed with status ${response.status}`);
                    const result = await response.json();
                    if (response.ok && result.success) {
                        Swal.fire({
                            icon: "error",
                            title: "Payment Failed",
                            text: "Your payment failed. The order has been recorded as pending.",
                            timer: 2000,
                        }).then(() => {
                            window.location.href = result.redirect || "/orderhistory";
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Order Failed",
                            text: "Failed to record the order. Please try again.",
                        });
                    }
                } catch (error) {
                    console.error("Error in submitOrderWithFailedPaymentToServer:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Server Error",
                        text: "An error occurred on the server. Please try again later.",
                    });
                }
            }
        </script>
</body>
</html>