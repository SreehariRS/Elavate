<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout Page</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/stylesheet/user/checkout.css">
    <style>
        .profile-icon {
            position: absolute;
            right: 60px;
            top: 25px;
            cursor: pointer;
        }
        .profile-icon i {
            font-size: 24px;
        }
        .header-text h1 {
            font-size: 4rem;
        }
        .cart-table img {
            max-width: 100px;
        }
    </style>
</head>
<body>
    <div class="back-button">
        <a href="javascript:history.back()"><i class="fas fa-arrow-left"></i></a>
    </div>

    <header class="header">
        <div class="header-text">
            <h1 id="elavate">ELAVATE</h1>
        </div>
        <div class="profile-icon">
            <i class="fas fa-user fa-2x"></i>
        </div>
    </header>

    <div class="checkout-container">
        <h1>Checkout</h1>
        <% if (errorMessage) { %>
            <div class="alert alert-danger"><%= errorMessage %></div>
        <% } %>
        <form id="checkoutForm">
            <div class="addresses-section">
                <h3>Select Delivery Address</h3>
                <% if (addresses.length === 0) { %>
                    <p>No addresses available. Please add an address.</p>
                <% } else { %>
                    <select class="form-control" id="address" name="selectedAddress">
                        <option value="" selected disabled>Select an address</option>
                        <% addresses.forEach(address => { %>
                            <option value="<%= address.addressType %> - <%= address.district %>, <%= address.state %>, <%= address.flat %>, <%= address.pincode %>, <%= address.country %>, <%= address.mobileNumber %>">
                                <%= address.addressType %> - <%= address.district %>, <%= address.state %>, <%= address.flat %>, <%= address.pincode %>, <%= address.country %>, <%= address.mobileNumber %>
                            </option>
                        <% }) %>
                    </select>
                <% } %>
                <button type="button" class="btn btn-primary font-weight-bold custom-btn add-address-button light-orange-btn" data-toggle="modal" data-target="#addAddressModal" style="width: 100%; margin-top: 10px;">Add Address</button>
            </div>
        </form>

        <div class="cart-details-section">
            <h3>Your Cart</h3>
            <% if (cartItems.length === 0) { %>
                <p>Your cart is empty.</p>
            <% } else { %>
                <table id="cart-table" class="table">
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Product</th>
                            <th>Description</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% cartItems.forEach(item => { %>
                            <% if (item.productId) { %>
                                <tr data-product-id="<%= item.productId._id %>">
                                    <td>
                                        <% if (item.productId.productImages && item.productId.productImages.length > 0) { %>
                                            <img src="<%= item.productId.productImages[0] %>" alt="<%= item.productId.name || 'Product Image' %>" class="img-fluid" />
                                        <% } else { %>
                                            <img src="/img/default-product.jpg" alt="Default Product Image" class="img-fluid" />
                                        <% } %>
                                    </td>
                                    <td><%= item.productId.name || 'Unknown Product' %></td>
                                    <td><%= item.productId.description || 'No description available' %></td>
                                    <td><%= item.quantity %></td>
                                    <td>
                                        <% if (item.productId.price !== null && item.productId.price !== undefined) { %>
                                            <% if (item.productId.offerprice !== null && item.productId.offerprice !== undefined) { %>
                                                ₹<%= Math.min(item.productId.offerprice, item.productId.price) %>
                                            <% } else { %>
                                                ₹<%= item.productId.price %>
                                            <% } %>
                                        <% } else { %>
                                            <span>No Price</span>
                                        <% } %>
                                    </td>
                                </tr>
                            <% } %>
                        <% }) %>
                    </tbody>
                </table>
            <% } %>
        </div>

        <div class="order-summary-section">
            <h3>Order Summary</h3>
            <h1>Total: ₹<span id="totalPrice"><%= totalPrice %></span></h1>
            <p>Discount: <span id="discountAmount">0%</span></p>
        </div>

        <div class="section">
            <h4>Payment Options</h4>
            <div class="form-group">
                <label>Select Payment Method:</label>
                <div class="form-check">
                    <input type="radio" class="form-check-input" id="cashOnDelivery" name="paymentMethod" value="Cash On Delivery">
                    <label class="form-check-label" for="cashOnDelivery">Cash On Delivery</label>
                </div>
                <div class="form-check">
                    <input type="radio" class="form-check-input" id="wallet" name="paymentMethod" value="wallet">
                    <label class="form-check-label" for="wallet">Wallet Payment</label>
                </div>
                <div class="form-check">
                    <input type="radio" class="form-check-input" id="razorPay" name="paymentMethod" value="Razor Pay">
                    <label class="form-check-label" for="razorPay">Razor Pay</label>
                </div>
            </div>
        </div>

        <div class="section">
            <h4>Apply Coupon</h4>
            <form id="couponForm">
                <div class="form-group">
                    <label for="coupon">Select Coupon:</label>
                    <select class="form-control" id="coupon" name="coupon">
                        <option value="" selected disabled>Select a Coupon</option>
                        <% coupons.forEach(coupon => { %>
                            <option value="<%= coupon.code %>"><%= coupon.code %> (<%= coupon.discountValue %>%)</option>
                        <% }) %>
                    </select>
                </div>
            </form>
            <button class="btn btn-secondary" type="button" onclick="applyCoupon()" id="applyCouponBtn">Apply Coupon</button>
        </div>

        <div id="userData" data-user='<%= JSON.stringify(userData) %>'></div>
        <div id="cartItemsData" data-cart-items='<%= JSON.stringify(cartItems) %>'></div>

        <% if (cartItems.length > 0) { %>
            <button class="btn btn-primary" onclick="submitOrder()">Proceed to Checkout</button>
        <% } else { %>
            <button class="btn btn-primary" disabled>Proceed to Checkout</button>
        <% } %>

        <!-- Add Address Modal -->
        <div class="modal fade" id="addAddressModal" tabindex="-1" role="dialog" aria-labelledby="addAddressModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addAddressModalLabel">Add Address</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form action="/Address" method="POST">
                            <div class="form-group">
                                <label for="addressType">Address Type</label>
                                <select name="addressType" class="form-control" required>
                                    <option value="home">Home</option>
                                    <option value="work">Work</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="country">Country/Region</label>
                                <input type="text" class="form-control" name="country" id="country" required>
                            </div>
                            <div class="form-group">
                                <label for="mobileNumber">Mobile Number</label>
                                <input type="number" class="form-control" name="mobileNumber" id="mobileNumber" required>
                            </div>
                            <div class="form-group">
                                <label for="pincode">Pincode (6 digits [0-9])</label>
                                <input type="text" class="form-control" name="pincode" id="pincode" pattern="[0-9]{6}" required>
                            </div>
                            <div class="form-group">
                                <label for="flat">Flat, House no., Building, Company, Apartment</label>
                                <input type="text" class="form-control" name="flat" id="flat" required>
                            </div>
                            <div class="form-group">
                                <label for="district">District</label>
                                <input type="text" class="form-control" name="district" id="district" required>
                            </div>
                            <div class="form-group">
                                <label for="state">State</label>
                                <input type="text" class="form-control" name="state" id="state" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Save Address</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        const userData = JSON.parse(document.getElementById('userData')?.getAttribute('data-user') || '{}');
        const cartItems = JSON.parse(document.getElementById('cartItemsData')?.getAttribute('data-cart-items') || '[]');
        const coupons = JSON.parse(document.getElementById('couponsData')?.getAttribute('data-coupons') || '[]');
        let couponApplied = false;

        document.querySelector('.profile-icon').addEventListener('click', () => {
            window.location.href = '/profile';
        });

        document.getElementById("elavate").addEventListener("click", () => {
            window.location.href = "/";
        });

        function calculateDiscountedPrice(originalPrice, coupon) {
            if (coupon && typeof coupon.discountValue === 'number') {
                return originalPrice - (originalPrice * (coupon.discountValue / 100));
            }
            console.error('Invalid coupon or discountValue:', coupon);
            return originalPrice;
        }

        function applyCoupon() {
            if (couponApplied) {
                Swal.fire({
                    icon: 'info',
                    title: 'Coupon Already Applied',
                    text: 'A coupon has already been applied to this order.',
                });
                return;
            }

            const selectedCouponElement = document.getElementById('coupon');
            const selectedCouponValue = selectedCouponElement.value;
            const selectedCoupon = coupons.find(coupon => coupon.code === selectedCouponValue);

            if (selectedCoupon) {
                const originalPrice = parseFloat(document.getElementById('totalPrice').innerText);
                const discountedPrice = calculateDiscountedPrice(originalPrice, selectedCoupon);
                document.getElementById('totalPrice').innerText = discountedPrice.toFixed(2);
                document.getElementById('discountAmount').innerText = `${selectedCoupon.discountValue}%`;
                couponApplied = true;
                document.getElementById('applyCouponBtn').disabled = true;
                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied',
                    text: `Coupon ${selectedCoupon.code} applied successfully!`,
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Coupon',
                    text: 'Please select a valid coupon.',
                });
            }
        }

        async function submitOrder() {
            try {
                const selectedAddressElement = document.getElementById("address");
                const selectedAddress = selectedAddressElement?.options[selectedAddressElement.selectedIndex]?.text;
                if (!selectedAddress) {
                    Swal.fire({
                        icon: 'error',
                        title: 'No Address Selected',
                        text: 'Please select a shipping address.',
                    });
                    return;
                }

                const paymentMethodElements = document.querySelectorAll('input[name="paymentMethod"]:checked');
                if (paymentMethodElements.length !== 1) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Payment Method',
                        text: 'Please select exactly one payment method.',
                    });
                    return;
                }

                const paymentMethod = paymentMethodElements[0].value;
                const selectedCouponElement = document.getElementById('coupon');
                const couponCode = selectedCouponElement.value;
                const totalPrice = parseFloat(document.getElementById('totalPrice').innerText);

                const orderData = {
                    selectedAddress,
                    paymentMethod,
                    couponCode: couponCode || null,
                    totalPrice,
                    cartItems: cartItems.map(item => ({
                        productId: item.productId._id,
                        quantity: item.quantity,
                    })),
                };

                if (totalPrice > 1000 && paymentMethod === 'Cash On Delivery') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Cannot Proceed',
                        text: 'Total amount exceeds ₹1000. Cash on Delivery is not available for amounts over ₹1000. Try Online payment.',
                    });
                    return;
                }

                if (paymentMethod === 'wallet') {
                    const walletCheckResponse = await fetch('/check-wallet', {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' },
                    });
                    const walletCheckResult = await walletCheckResponse.json();

                    if (walletCheckResult.balance < totalPrice) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Insufficient Wallet Balance',
                            text: 'Top up your wallet or choose another payment method.',
                        });
                        return;
                    }

                    const updateWalletResponse = await fetch('/update-wallet', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ amount: totalPrice }),
                    });
                    const updateWalletResult = await updateWalletResponse.json();

                    if (!updateWalletResult.success) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Wallet Update Failed',
                            text: 'Please try again or choose another payment method.',
                        });
                        return;
                    }

                    await submitOrderToServer(orderData);
                } else if (paymentMethod === 'Razor Pay') {
                    const createOrderResponse = await fetch('/create-razorpay-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ amount: totalPrice }),
                    });
                    const createOrderResult = await createOrderResponse.json();

                    if (createOrderResult.error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to Create Razorpay Order',
                            text: 'Please try again later or choose a different payment method.',
                            timer: 3000,
                            timerProgressBar: true,
                        });
                        return;
                    }

                    const options = {
                        key: "rzp_test_rJ0yPg6ZIlUOvq",
                        amount: totalPrice * 100,
                        currency: "INR",
                        name: "Elavate",
                        description: "Payment for your order",
                        order_id: createOrderResult.id,
                        handler: async function (response) {
                            const verifyResponse = await fetch('/verify-razorpay-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    paymentId: response.razorpay_payment_id,
                                    orderId: response.razorpay_order_id,
                                    signature: response.razorpay_signature,
                                }),
                            });
                            const verifyResult = await verifyResponse.json();

                            if (verifyResult.success) {
                                await fetch('/update-order-status', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        orderId: createOrderResult.id,
                                        paymentId: response.razorpay_payment_id,
                                        status: 'confirmed',
                                    }),
                                });
                                await submitOrderToServer(orderData);
                            } else {
                                orderData.status = 'paymentfailed';
                                await submitOrderWithFailedPaymentToServer(orderData);
                            }
                        },
                        prefill: {
                            name: userData.firstname || "Customer",
                            email: userData.email || "customer@example.com",
                            contact: userData.mobileNumber || "9999999999",
                        },
                        theme: {
                            color: "#A48F7A",
                        },
                    };

                    const razorpayInstance = new Razorpay(options);
                    razorpayInstance.on('payment.failed', async function (response) {
                        orderData.status = 'paymentfailed';
                        await submitOrderWithFailedPaymentToServer(orderData);
                    });
                    razorpayInstance.open();
                } else {
                    await submitOrderToServer(orderData);
                }
            } catch (error) {
                console.error(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Checkout Failed',
                    text: 'An error occurred during checkout. Please try again.',
                });
            }
        }

        async function submitOrderToServer(orderData) {
            const response = await fetch('/checkout', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData),
            });
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Placed',
                    text: 'Your order has been successfully placed!',
                    timer: 2000,
                }).then(() => {
                    window.location.href = "/order";
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: 'Failed to place the order. Please try again.',
                });
            }
        }

        async function submitOrderWithFailedPaymentToServer(orderData) {
            const response = await fetch('/checkouterror', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData),
            });
            if (response.ok) {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Failed',
                    text: 'Your payment failed. The order has been recorded as pending.',
                    timer: 2000,
                }).then(() => {
                    window.location.href = "/orderhistory";
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: 'Failed to record the order. Please try again.',
                });
            }
        }
    </script>
</body>
</html>