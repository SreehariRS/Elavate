<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Order History</title>
    <script src="https://kit.fontawesome.com/bdf5ca2238.js" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8fafc;
            color: #1e293b;
        }

        .container {
            max-width: 1000px;
            margin: 40px auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }

        a {
            color: #2563eb;
            text-decoration: none;
            transition: color 0.2s ease;
        }

        a:hover {
            color: #1e40af;
        }

        .header {
            background-color: #ffffff;
            padding: 20px 0;
            border-bottom: 1px solid #e2e8f0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1000px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
        }

        .header-text h1 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
            color: #1e293b;
            cursor: pointer;
        }

        .profile-icon i {
            font-size: 1.5rem;
            color: #475569;
            transition: color 0.2s ease;
        }

        .profile-icon:hover i {
            color: #2563eb;
        }

        .back-button {
            display: flex;
            align-items: center;
        }

        .back-button a {
            font-size: 1.2rem;
            color: #475569;
            transition: color 0.2s ease;
        }

        .back-button a:hover {
            color: #2563eb;
        }

        h2.main-title {
            text-align: center;
            font-size: 1.8rem;
            font-weight: 600;
            color: #1e293b;
            margin: 30px 0;
        }

        .order-item {
            display: flex;
            gap: 20px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #f8fafc;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
            transition: transform 0.2s ease;
        }

        .order-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .product-info img {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 8px;
        }

        .order-details {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .product-details {
            flex: 2;
        }

        .order-details h2 {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
        }

        p {
            margin: 5px 0;
            font-size: 0.9rem;
            color: #475569;
        }

        .status-confirmed {
            color: #22c55e;
            font-weight: 500;
        }

        .status-shipped {
            color: #f97316;
            font-weight: 500;
        }

        .status-returned {
            color: #7c3aed;
            font-weight: 500;
        }

        .status-cancelled {
            color: #ef4444;
            font-weight: 500;
        }

        .status-delivered {
            color: #ec4899;
            font-weight: 500;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .action-btn {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
        }

        .action-btn.primary {
            background-color: #2563eb;
            color: #ffffff;
        }

        .action-btn.secondary {
            background-color: #6b7280;
            color: #ffffff;
        }

        .action-btn:hover {
            transform: translateY(-1px);
            filter: brightness(90%);
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }

        .pagination .page-item.active .page-link {
            background-color: #2563eb;
            border-color: #2563eb;
            color: #ffffff;
        }

        .pagination .page-link {
            color: #2563eb;
            border-radius: 6px;
            margin: 0 4px;
        }

        .pagination .page-link:hover {
            background-color: #eff6ff;
        }

        .debug-info {
            background-color: #f1f5f9;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 0.85rem;
            color: #64748b;
        }

        .swal2-container {
            font-family: 'Inter', sans-serif;
        }

        .swal2-title {
            font-size: 1.25rem;
            color: #1e293b;
        }

        .swal2-html-container {
            font-size: 0.9rem;
            color: #475569;
        }

        .swal2-input {
            border-radius: 6px;
            padding: 10px;
            font-size: 0.9rem;
            border: 1px solid #e2e8f0;
        }

        .swal2-confirm {
            background-color: #2563eb;
            border-radius: 6px;
            padding: 10px 20px;
            font-size: 0.9rem;
        }

        .swal2-cancel {
            background-color: #6b7280;
            border-radius: 6px;
            padding: 10px 20px;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <div class="back-button">
                <a href="javascript:history.back()"><i class="fas fa-arrow-left"></i></a>
            </div>
            <div class="header-text">
                <h1 id="elavate">ELAVATE</h1>
            </div>
            <div class="profile-icon">
                <i class="fas fa-user"></i>
            </div>
        </div>
    </header>

    <h2 class="main-title">Your Orders</h2>

    <div id="userData" data-user='<%= JSON.stringify(userData) %>'></div>
    <div id="ordersData" data-orders='<%= JSON.stringify(orders) %>'></div>

    <div class="container">
     

        <% if (orders && orders.length > 0) { %>
            <% orders.forEach(order => { %>
                <% order.items.forEach(item => { %>
                    <div class="order-item">
                        <div class="product-info">
                            <% if (item.productId && item.productId.productImages && item.productId.productImages.length > 0) { %>
                                <img src="<%= item.productId.productImages[0] %>" alt="Product Image" />
                            <% } %>
                        </div>
                        <div class="order-details">
                            <h2>Order ID: <%= String(order._id).slice(-4) %></h2>
                            <p>Date & Time: <%= order.date ? new Date(order.date).toLocaleString() : 'Not Available' %></p>
                            <% if (order.status === 'delivered') { %>
                                <div class="action-buttons">
                                    <button class="action-btn primary" onclick="generateInvoice('<%= order._id %>')">Generate Invoice</button>
                                    <button class="action-btn secondary" onclick="initiateReturn('<%= order._id %>')">Request Return</button>
                                    <button class="action-btn secondary" onclick="initiateRefund('<%= order._id %>')">Request Refund</button>
                                </div>
                            <% } else if (order.status === 'pending' || order.status === 'paymentfailed') { %>
                                <div class="action-buttons">
                                    <button class="action-btn primary" onclick="retryPayment('<%= order._id %>')">Retry Payment</button>
                                </div>
                            <% } else if (order.status === 'return-requested' || order.status === 'refund-requested' || order.status === 'cancellation-requested') { %>
                                <p><strong>Status:</strong> <span class="status-<%= order.status.toLowerCase() %>"><%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %> (Pending Admin Approval)</span></p>
                                <div class="action-buttons">
                                    <button class="action-btn primary" onclick="generateInvoice('<%= order._id %>')">Generate Invoice</button>
                                </div>
                            <% } else if (order.status === 'returned' || order.status === 'refunded' || order.status === 'cancelled') { %>
                                <div class="action-buttons">
                                    <button class="action-btn primary" onclick="generateInvoice('<%= order._id %>')">Generate Invoice</button>
                                </div>
                            <% } else { %>
                                <div class="action-buttons">
                                    <button class="action-btn secondary" onclick="cancelOrder('<%= order._id %>')">Request Cancellation</button>
                                </div>
                            <% } %>
                        </div>
                        <div class="product-details">
                            <% if (item.productId && item.productId.productImages && item.productId.productImages.length > 0) { %>
                                <h2><%= item.productId.name %></h2>
                                <p><strong>Quantity:</strong> <%= item.quantity %></p>
                                <p><strong>Item Total:</strong> ₹<%= (item.productId.offerprice || item.productId.price) * item.quantity %></p>
                                <p><strong>Address:</strong> <%= order.selectedAddress %></p>
                                <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                                <p><strong>Discount Amount:</strong> ₹<span style="color: #dc2626;">
                                    <%= order.couponId ? (order.items.reduce((acc, item) => acc + ((item.productId.offerprice || item.productId.price) * item.quantity), 0) - order.totalPrice) : 0 %>
                                </span></p>
                                <p><strong>Net Amount:</strong> ₹<span style="color: #2563eb;"><%= order.totalPrice %></span></p>
                                <p><strong>Order Status:</strong> <span class="status-<%= order.status.toLowerCase() %>"><%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %></span></p>
                                <div class="debug-info">
                                    <p><strong>Debug Product:</strong></p>
                                    <p>Product ID: <%= item.productId._id %></p>
                                    <p>Product Name: <%= item.productId.name %></p>
                                </div>
                            <% } else { %>
                                <p><em>Apologies, the product is currently unavailable.</em></p>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            <% }); %>
        <% } else { %>
            <div class="text-center mt-4">
                <p>No orders found.</p>
            </div>
        <% } %>

        <nav aria-label="Order history pagination">
            <ul class="pagination">
                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                    <a class="page-link" href="/orderhistory?page=<%= currentPage - 1 %>">Previous</a>
                </li>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="/orderhistory?page=<%= i %>"><%= i %></a>
                    </li>
                <% } %>
                <li class="page-item <%= currentPage >= totalPages ? 'disabled' : '' %>">
                    <a class="page-link" href="/orderhistory?page=<%= currentPage + 1 %>">Next</a>
                </li>
            </ul>
        </nav>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        const userData = JSON.parse(document.getElementById('userData')?.getAttribute('data-user') || '{}');
        let orders = JSON.parse(document.getElementById('ordersData')?.getAttribute('data-orders') || '[]');

        document.querySelector('.profile-icon').addEventListener('click', () => {
            window.location.href = '/profile';
        });

        document.getElementById("elavate").addEventListener('click', () => {
            window.location.href = '/';
        });

        async function refreshOrderData() {
            try {
                const response = await fetch('/orderhistory-data', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                });
                const data = await response.json();
                if (data.success) {
                    orders = data.orders;
                    window.location.reload();
                } else {
                    console.error('Failed to refresh order data');
                }
            } catch (error) {
                console.error('Error refreshing order data:', error);
            }
        }

        if (window.location.search.includes('success=true')) {
            refreshOrderData();
        }

        async function retryPayment(orderId) {
            try {
                const order = orders.find(o => o._id === orderId);
                if (!order) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Not Found',
                        text: 'The order could not be found.',
                    });
                    return;
                }

                const createOrderResponse = await fetch('/create-razorpay-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ amount: order.totalPrice }),
                });
                const createOrderResult = await createOrderResponse.json();

                if (createOrderResult.error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to Create Razorpay Order',
                        text: 'Please try again later.',
                        timer: 3000,
                        timerProgressBar: true,
                    });
                    return;
                }

                const orderData = {
                    orderId: order._id,
                    userId: '<%= userId %>',
                    cartItems: order.items.map(item => ({
                        productId: item.productId._id,
                        quantity: item.quantity,
                    })),
                    selectedAddress: order.selectedAddress,
                    totalPrice: order.totalPrice,
                    paymentMethod: 'Razor Pay',
                    couponId: order.couponId || null,
                    razorpayOrderId: createOrderResult.id,
                };

                const options = {
                    key: 'rzp_test_rJ0yPg6ZIlUOvq',
                    amount: order.totalPrice * 100,
                    currency: 'INR',
                    name: 'Elavate',
                    description: 'Retry Payment for Order ' + orderId,
                    order_id: createOrderResult.id,
                    handler: async function (response) {
                        const verifyResponse = await fetch('/verify-razorpay-payment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                paymentId: response.razorpay_payment_id,
                                orderId: response.razorpay_order_id,
                                signature: response.razorpay_signature,
                            }),
                        });
                        const verifyResult = await verifyResponse.json();

                        if (verifyResult.success) {
                            orderData.paymentId = response.razorpay_payment_id;
                            await updateOrderStatus(orderData);
                        } else {
                            orderData.status = 'paymentfailed';
                            await submitOrderWithFailedPayment(orderData);
                        }
                    },
                    prefill: {
                        name: userData.firstname || 'Customer',
                        email: userData.email || 'customer@example.com',
                        contact: userData.mobileNumber || '9999999999',
                    },
                    theme: {
                        color: '#2563eb',
                    },
                };

                const razorpayInstance = new Razorpay(options);
                razorpayInstance.on('payment.failed', async function (response) {
                    orderData.status = 'paymentfailed';
                    await submitOrderWithFailedPayment(orderData);
                });
                razorpayInstance.open();
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Retry Payment Failed',
                    text: 'An error occurred while retrying the payment. Please try again.',
                });
            }
        }

        async function updateOrderStatus(orderData) {
            try {
                const response = await fetch('/retry-checkout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        orderId: orderData.orderId,
                        razorpayOrderId: orderData.razorpayOrderId,
                        paymentId: orderData.paymentId,
                        status: 'confirmed',
                    }),
                });
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order Confirmed',
                        text: 'Your payment was successful and the order is confirmed!',
                        timer: 2000,
                    }).then(() => {
                        window.location.href = '/orderhistory?success=true';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Update Failed',
                        text: 'Failed to confirm the order. Please try again.',
                    });
                }
            } catch (error) {
                console.error(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Order Update Failed',
                    text: 'An error occurred while confirming the order.',
                });
            }
        }

        async function submitOrderWithFailedPayment(orderData) {
            try {
                const response = await fetch('/retry-checkout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        orderId: orderData.orderId,
                        razorpayOrderId: orderData.razorpayOrderId,
                        paymentId: orderData.paymentId || null,
                        status: 'paymentfailed',
                    }),
                });
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: 'Your payment failed. The order has been recorded as pending.',
                        timer: 2000,
                    }).then(() => {
                        window.location.href = '/orderhistory';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Update Failed',
                        text: 'Failed to record the order. Please try again.',
                    });
                }
            } catch (error) {
                console.error(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Order Update Failed',
                    text: 'An error occurred while recording the order.',
                });
            }
        }

        async function generateInvoice(orderId) {
            try {
                const response = await fetch(`/generate-invoice/${orderId}`);
                if (response.ok) {
                    const blob = await response.blob();
                    const link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = `invoice_${orderId}.pdf`;
                    link.click();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invoice Generation Failed',
                        text: 'Failed to generate the invoice. Please try again.',
                    });
                }
            } catch (error) {
                console.error('Error generating invoice:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Invoice Generation Failed',
                    text: 'An error occurred while generating the invoice.',
                });
            }
        }

        async function initiateReturn(orderId) {
            try {
                const { value: reason } = await Swal.fire({
                    title: 'Initiate Return',
                    input: 'text',
                    inputLabel: 'Reason for Return',
                    inputPlaceholder: 'Enter your reason here',
                    showCancelButton: true,
                    confirmButtonText: 'Request Return',
                });

                if (reason) {
                    const response = await fetch(`/initiate-return/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ cancellationReason: reason }),
                    });

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Return Requested',
                            text: 'Your return request has been submitted for admin approval.',
                            timer: 2000,
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Return Request Failed',
                            text: 'Failed to request return. Please try again.',
                        });
                    }
                }
            } catch (error) {
                console.error('Error initiating return:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Return Request Failed',
                    text: 'An error occurred while requesting the return.',
                });
            }
        }

        async function initiateRefund(orderId) {
            try {
                const { value: reason } = await Swal.fire({
                    title: 'Initiate Refund',
                    input: 'text',
                    inputLabel: 'Reason for Refund',
                    inputPlaceholder: 'Enter your reason here',
                    showCancelButton: true,
                    confirmButtonText: 'Request Refund',
                });

                if (reason) {
                    const response = await fetch(`/initiate-refund/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ cancellationReason: reason }),
                    });

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Refund Requested',
                            text: 'Your refund request has been submitted for admin approval.',
                            timer: 2000,
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Refund Request Failed',
                            text: 'Failed to request refund. Please try again.',
                        });
                    }
                }
            } catch (error) {
                console.error('Error initiating refund:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Refund Request Failed',
                    text: 'An error occurred while requesting the refund.',
                });
            }
        }

        async function cancelOrder(orderId) {
            try {
                const { value: reason } = await Swal.fire({
                    title: 'Request Cancellation',
                    input: 'text',
                    inputLabel: 'Reason for Cancellation',
                    inputPlaceholder: 'Enter your reason here',
                    showCancelButton: true,
                    confirmButtonText: 'Request Cancellation',
                });

                if (reason) {
                    const response = await fetch(`/cancel-order/${orderId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ cancellationReason: reason }),
                    });

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Cancellation Requested',
                            text: 'Your cancellation request has been submitted for admin approval.',
                            timer: 2000,
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Cancellation Request Failed',
                            text: 'Failed to request cancellation. Please try again.',
                        });
                    }
                }
            } catch (error) {
                console.error('Error requesting cancellation:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Cancellation Request Failed',
                    text: 'An error occurred while requesting the cancellation.',
                });
            }
        }
    </script>
</body>
</html>