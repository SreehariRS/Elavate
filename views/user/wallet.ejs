<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wallet Information</title>
    <script src="https://kit.fontawesome.com/bdf5ca2238.js" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  
</head>
<body>
    
     <style>
@media (max-width: 768px) {
  h1 {
    font-size: 30px; /* Smaller font size for smaller screens */
  }
}
h1 {
  font-family: 'Poppins', sans-serif;
  font-weight: 700; /* For bold text */
  font-size: 36px; /* Adjust the size as needed */
  color: #333; /* Change the color as desired */
  text-align: center; /* Center the text */
  margin-bottom: 20px; /* Add some space below the heading */
}
@media (max-width: 768px) {
      h1 {
        font-size: 30px; /* Smaller font size for smaller screens */
      }
    }
    h1 {
      font-family: 'Poppins', sans-serif;
      font-weight: 700; /* For bold text */
      font-size: 36px; /* Adjust the size as needed */
      color: #333; /* Change the color as desired */
      text-align: center; /* Center the text */
      margin-bottom: 20px; /* Add some space below the heading */
    }
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #f8f9fa; /* Light gray background */
      color: #333; /* Dark text color */
      padding-top: 20px; /* Add some space at the top */
    }
    .container {
      max-width: 600px; /* Limit container width */
      margin: 0 auto; /* Center container */
      padding: 0 15px; /* Add some padding to the sides */
    }
    .card {
 background: linear-gradient(to right, #ffffff, #ffffffaf);
 border-radius: 10px;
 box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
 transition: transform 0.3s ease-in-out;
 margin-bottom: 20px; 
}

.card:hover {
 transform: scale(1.05);
}

.card-body {
 padding: 20px;
}

.card-title {
 color: #292525;
 font-weight: bold;
}

.card-text {
 color: #322c2c;
}


    .form-group {
      margin-bottom: 15px; /* Add space below form fields */
    }
    button[type="button"] {
      cursor: pointer; /* Change cursor to pointer for buttons */
    }
    /* Animation */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    .animated {
      animation-name: fadeIn;
      animation-duration: 1s;
    }
    /* Additional styles */
    .modal-content {
      background-color: #f8f9fa; /* Light gray background for modal */
      border-radius: 10px; /* Rounded corners for modal */
      overflow: hidden; /* Hide overflow content */
    }
    .modal-header {
      background-color: #232424; /* Blue background for modal header */
      color: #fff; /* White text color for modal header */
      border-bottom: none; /* Remove border bottom for modal header */
    }
    .modal-title {
      font-size: 24px; /* Font size for modal title */
    }
    .modal-body {
      padding: 20px; /* Add padding to modal body */
    }
    .modal-footer {
      border-top: none; /* Remove border top for modal footer */
    }
    .btn {
      background-color: #1c1d1e; /* Blue background for primary button */
      border-color: #161616; /* Blue border color for primary button */
    }
    .btn:hover {
      background-color: #1b1c1c; /* Darker blue background on hover */
      border-color: #151515; /* Darker blue border color on hover */
    }
    .card-title {
 text-align: center; 
}
.card-text{
  text-align: center;
}
.black-touch {
  background-color: #000; /* Black background color */
  border-color: #000; /* Black border color */
  color: #fff; /* White text color */
}

.black-touch:hover {
  background-color: #383737; 
  border-color: #ffffff; 
  color: white;
}
.button-container {
 display: flex;
 justify-content: center; /* Center the buttons horizontally */
 gap: 10px; /* Adjust the gap between buttons as needed */
 margin-top: 20px;
}

@media (max-width: 359px) {
 .button-container {
    flex-direction: column; /* Stack buttons vertically */
 }
}
.content-container {
 background: linear-gradient(to right, #ffffff, #e4f8e7, #c5f4cb);
 border-radius: 10px; /* Adjust the border radius as needed */
 box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Adjust the box shadow as needed */
 padding: 20px; /* Add some padding inside the container */
}


.content-container  {
 max-width: 1000px; /* Set the maximum width of the container */
 margin: 0 auto; /* Center the container horizontally */
}

@media (max-width: 1200px) {
  .content-container  {
    max-width: 90%; /* Reduce the maximum width for smaller screens */
 }
}
.back-button {
                position: absolute;
                top: 25px;
                left: 80px;
                z-index: 1000; /* Ensure the button is above other elements */
            }

            .back-button a {
                font-size: 24px; /* Increase the font size of the icon */
                padding: 10px; /* Add some padding around the icon */
                color: #000; /* Adjust the color as needed */
                text-decoration: none;
            }

            .back-button a:hover {
                color: #333; /* Change the color on hover */
            }
            .header {
                position: relative;
                width: 100%;
                height: 60px; /* Adjust the height as needed */
                background-color: #f8f9fa; /* Background color of the header */
            }

            .header-text {
                position: absolute;
                top: 70%;
                left: 50%;
                transform: translate(-50%, -50%);
                text-align: center;
            }

            .content-container {
                position: relative;
                top: 25px; /* Adjust this value as needed */
            }

            /* Default styles */
            .header-text h1 {
                font-size: 3rem;
            }
            .profile-icon {
    position: absolute;
    right: 60px;
    top: 12px;
    cursor: pointer;
}
.profile-icon i {
    font-size: 24px; /* Adjust the size as needed */
}
 .pagination-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
        }
        .pagination-info {
            font-size: 0.9rem;
            color: #555;
        }
        .pagination-btn {
            min-width: 100px;
        }
   </style>
    <div class="back-button">
        <a href="javascript:history.back()"><i class="fas fa-arrow-left"></i></a>
    </div>

    <header class="header">
        <div class="header-text">
            <h1 id="elavate">ELAVATE</h1>
        </div>
        <div class="profile-icon">
            <inio</a>
        </div>
    </header>

    <div class="content-container">
        <div class="container">
            <h1 class="text-center mb-4">Wallet</h1>

            <!-- Inject userData for client-side use -->
            <div id="userData" data-user='<%= JSON.stringify(userData) %>'></div>

            <!-- Display Wallet Balance -->
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Current Balance</h5>
                    <p class="card-text">Balance: ₹<%= balance.toFixed(2) %></p>
                </div>
            </div>

            <!-- Transaction History Modal -->
            <div class="modal fade" id="transactionModal" tabindex="-1" role="dialog" aria-labelledby="transactionModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="transactionModalLabel">Transaction History</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <% if (userWallet && userWallet.transactions && userWallet.transactions.length > 0) { %>
                                <ul class="list-group">
                                    <% userWallet.transactions.forEach(transaction => { %>
                                        <% if (transaction && transaction.type && transaction.amount && transaction.date) { %>
                                            <li class="list-group-item">
                                                <strong><%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %></strong>: ₹<%= transaction.amount.toFixed(2) %>
                                                <br>
                                                <small>Date: <%= new Date(transaction.date).toLocaleString('en-IN', { dateStyle: 'medium', timeStyle: 'short' }) %></small>
                                                <% if (transaction.paymentId) { %>
                                                    <br>
                                                    <small>Payment ID: <%= transaction.paymentId %></small>
                                                <% } %>
                                            </li>
                                        <% } %>
                                    <% }); %>
                                </ul>
                            <% } else { %>
                                <p>No transaction history available.</p>
                            <% } %>
                            <div class="pagination-container">
                                <button class="btn btn-secondary pagination-btn <%= currentPage === 1 ? 'disabled' : '' %>" 
                                        onclick="window.location.href='/wallet?page=<%= currentPage - 1 %>'" 
                                        <%= currentPage === 1 ? 'disabled' : '' %>>
                                    Previous
                                </button>
                                <span class="pagination-info">Page <%= currentPage %> of <%= totalPages %></span>
                                <button class="btn btn-secondary pagination-btn <%= currentPage === totalPages ? 'disabled' : '' %>" 
                                        onclick="window.location.href='/wallet?page=<%= currentPage + 1 %>'" 
                                        <%= currentPage === totalPages ? 'disabled' : '' %>>
                                    Next
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add Balance Form -->
            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Add Balance</h5>
                    <form id="addBalanceForm">
                        <div class="form-group text-center">
                            <label for="amount">Amount (₹)</label>
                            <input type="number" class="form-control" id="amount" name="amount" min="1" required>
                        </div>
                    </form>
                </div>
            </div>

            <div class="button-container">
                <button type="button" class="btn animated-button black-touch" data-toggle="modal" data-target="#transactionModal">
                    View Transaction History
                </button>
<button type="button" class="btn btn-dark animated-button" onclick="handlePayment()">Add Balance</button>

            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        const userData = JSON.parse(document.getElementById('userData')?.getAttribute('data-user') || '{}');

        document.querySelector('.back-button').addEventListener('click', () => {
            window.history.back();
        });

        document.querySelector('.profile-icon').addEventListener('click', () => {
            window.location.href = '/profile';
        });

        document.getElementById('elavate').addEventListener('click', () => {
            window.location.href = '/';
        });

        function handlePayment() {
            const amount = document.getElementById('amount').value;

            if (!amount || amount <= 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Amount',
                    text: 'Please enter a valid amount to add to your wallet!',
                    confirmButtonColor: '#3085d6',
                });
                return;
            }

            fetch('/generate-razorpay-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to create Razorpay order. Please try again.',
                            confirmButtonColor: '#3085d6',
                        });
                        return;
                    }

                    const options = {
                        key: 'rzp_test_rJ0yPg6ZIlUOvq',
                        amount: data.amount,
                        currency: 'INR',
                        name: 'Elavate',
                        description: 'Add Balance to Wallet',
                        order_id: data.id,
                        handler: async function (response) {
                            const verifyResponse = await fetch('/verify-razorpay-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    paymentId: response.razorpay_payment_id,
                                    orderId: response.razorpay_order_id,
                                    signature: response.razorpay_signature,
                                }),
                            });
                            const verifyResult = await verifyResponse.json();

                            if (verifyResult.success) {
                                const updateResponse = await fetch('/update-wallet', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        amount,
                                        paymentId: response.razorpay_payment_id,
                                    }),
                                });
                                const updateResult = await updateResponse.json();

                                if (updateResult.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Balance Added',
                                        text: `₹${amount} has been added to your wallet!`,
                                        position: 'top-end',
                                        toast: true,
                                        showConfirmButton: false,
                                        timer: 1500,
                                        customClass: { popup: 'swal2-small-toast' },
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Failed to update wallet balance.',
                                        confirmButtonColor: '#3085d6',
                                    });
                                }
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed',
                                    text: 'Payment verification failed. Please try again.',
                                    confirmButtonColor: '#3085d6',
                                });
                            }
                        },
                        prefill: {
                            name: userData.firstname || 'Customer',
                            email: userData.email || 'customer@example.com',
                            contact: userData.mobileNumber || '9999999999',
                        },
                        theme: { color: '#A48F7A' },
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function (response) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            text: response.error.description,
                            confirmButtonColor: '#3085d6',
                        });
                    });
                    rzp.open();
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to initiate payment. Please try again.',
                        confirmButtonColor: '#3085d6',
                    });
                });
        }
    </script>
</body>
</html>