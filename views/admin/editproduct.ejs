<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link rel="stylesheet" href="/stylesheet/admin/editproduct.css">
</head>
<body>

      <style>
    @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;800&family=Poppins:wght@300;400;500;600;700&display=swap");

* {
  font-family: "Poppins", "sans-sarif";
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --body-color: #ffffff;
  --sidebar-color: #000000;
  --primary-color: #f4f2f2;
  --primary-color-light: #f4f2f2;
  --text-color: #ffffff;
 

  --trans-02: all 0.2s ease;
  --trans-03: all 0.3s ease;
  --trans-04: all 0.4s ease;
  --trans-04: all 0.5s ease;
}

body {
  height: 100vh;
  background-color: var(--body-color);
  transition: var(--trans-02);
}

.sidebar .text {
  font-size: 16px;
  font-weight: 500;
  color: var(--text-color);
  /* transition: var(--trans-04); */
  white-space: unset;
  opacity: 1;
}

.sidebar .image {
  min-width: 60px;
  display: flex;
  align-items: center;
}

/* Sidebar */
.sidebar {
  position: fixed;
  top: 0;
  left: 0px;
  height: 100%;
  width: 250px;
  background-color: var(--sidebar-color);
  padding: 10px 14px;
  transition: var(--trans-02);
}

.sidebar header {
  position: relative;
}
.sidebar .image-text img {
  width: 40px;
  height: 40px;
  border-radius: 10px;
}

.sidebar header .image-text {
  display: flex;
  align-items: center;
}

.header .image-text .header-text {
  display: flex;
  flex-direction: column;
}

.header-text .main {
  font-weight: 600;
}

.header-text .sub {
  margin-top: -2px;
}


.sidebar li {
  height: 50px;
  /* background-color: red; */
  margin-top: 10px;
  list-style: none;
  display: flex;
  align-items: center;
}

.sidebar li .icons {
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 60px;
  font-size: 20px;
}
.sidebar li .icons,
.sidebar li .text {
  color: var(--text-color);
  transition: var(--trans-03);
}

.sidebar li a {
  height: 100%;
  width: 100%;
  text-decoration: none;
  display: flex;
  align-items: center;
  padding-right: 50px;
  border-radius: 6px;
  transition: var(--trans-04);
  text-align: left;
}

.sidebar li a:hover {
  background: var(--primary-color);
}
.sidebar li a:hover .icons,
.sidebar li a:hover .text {
  color: var(--dark-color);
}

.sidebar .menu-bar {
  height: 100%;
  height: calc(100% - 50px);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}



.editproductcontainer {
  font-family: 'Arial', sans-serif;
  max-width: 800px;
  margin: 1px auto;
  padding: 20px;
  background-color: #fff;
}

h1 {
  text-align: center;
  color: #333;
}

label {
  font-weight: bold;
  display: block;
  margin-bottom: 5px;
}

input,
textarea,
select {
  width: 100%;
  padding: 10px;
  margin-top: 5px;
  margin-bottom: 15px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 16px;
}

button {
  margin-left: 37% ;
  width: 30%;
  background-color: #000000;
  color: #fff;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

#productImageLabel {
  margin-top: 10px;
}

#selectedImagePlaceholder {
  margin-top: 5px;
  display: block;
}
.image-preview {
  display: inline-block;
  margin-right: 10px;
}

.preview-image {
  max-width: 100px; /* Adjust the maximum width as needed */
  max-height: 100px; /* Adjust the maximum height as needed */
  border: 1px solid #ccc; /* Add a border for better visibility */
}

.delete-button {
  display: block;
  margin-top: 5px;
  background-color: #ff0000; /* Red color for delete button */
  color: #fff; /* White text color */
  border: none;
  padding: 5px 10px;
  border-radius: 5px;
  cursor: pointer;
  width: 70%;
}

/* Add more styles as needed */

  </style>
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet"/>
    <div class="toggle-sidebar">
        <i class="bx bx-menu toggle-icon"></i>
    </div>
    <nav class="sidebar">
        <header>
            <div class="image-text">
                <span class="image">
                    <img src="/img/logo.png" alt="logo"/>
                </span>
                <div class="text header-text">
                    <span class="main">ELAVATE</span><br>
                    <span class="sub">make your smell</span>
                </div>
            </div>
        </header>
        <div class="menu-bar">
            <div class="menu">
                <ul class="menu-links">
                    <li class="nav-link"><a href="/admin/home"><i class="bx bx-home-alt icons"></i><span class="text nav-text">Dashboard</span></a></li>
                    <li class="nav-link"><a href="/admin/customers"><i class="bx bx-bar-chart-alt-2 icons"></i><span class="text nav-text">User</span></a></li>
                    <li class="nav-link"><a href="/admin/productlist"><i class="bx bx-bell icons"></i><span class="text nav-text">Product</span></a></li>
                    <li class="nav-link"><a href="/admin/order"><i class="bx bx-pie-chart-alt icons"></i><span class="text nav-text">Order</span></a></li>
                    <li class="nav-link"><a href="/admin/category"><i class="bx bx-heart icons"></i><span class="text nav-text">Category</span></a></li>
                    <li class="nav-link"><a href="/admin/coupon"><i class="bx bx-wallet-alt icons"></i><span class="text nav-text">Coupon</span></a></li>
                    <li class="nav-link"><a href="/admin/sales"><i class="bx bx-wallet-alt icons"></i><span class="text nav-text">Sales Report</span></a></li>
                </ul>
            </div>
            <div class="bottom-content">
                <li class="nav-link"><a href="/admin/logout"><i class="bx bx-log-out icons"></i><span class="text nav-text">Log Out</span></a></li>
            </div>
        </div>
    </nav>
    <div class="editproductcontainer">
        <h1>Edit Product</h1>
        <% if (prod) { %>
        <form action="/admin/editproduct/<%= prod._id %>" id="editProductForm" method="POST" enctype="multipart/form-data">
            <label for="productName">Product Name:</label>
            <input type="text" id="productName" name="name" value="<%= prod.name %>" required>

            <label for="productDescription">Product Description:</label>
            <textarea id="productDescription" name="description" required><%= prod.description %></textarea>

            <label for="productCategory">Product Category:</label>
            <select id="productCategory" name="category" required>
                <% categories.forEach(category => { %>
                    <option value="<%= category %>" <%= prod.category === category ? 'selected' : '' %>><%= category %></option>
                <% }); %>
            </select>

            <label for="productPrice">Product Price:</label>
            <input type="number" id="productPrice" name="price" min="0" step="0.01" value="<%= prod.price %>" required>

            <label for="offerprice">Offer Price:</label>
            <input type="number" id="offerprice" name="offerprice" min="0" step="0.01" value="<%= prod.offerprice %>">

            <label for="productStock">Product Stock:</label>
            <input type="number" id="productStock" name="stock" value="<%= prod.stock %>" required>

            <label for="productImages">Product Images:</label>
            <input type="file" id="productImages" name="productImages" accept="image/*" multiple onchange="previewImages()">
            <input type="hidden" id="existingImages" name="existingImages" value="<%= JSON.stringify(prod.productImages) %>"/>
            <div id="imagePreviews" class="image-preview-container">
                <% prod.productImages.forEach((image, index) => { %>
                    <div class="image-preview" data-index="<%= index %>">
                        <img src="<%= image %>" alt="Product Image" class="preview-image"/>
                        <button type="button" class="delete-button" onclick="deleteImage('<%= prod._id %>', '<%= index %>')">âœ–</button>
                    </div>
                <% }); %>
            </div>
            <span id="selectedImagesPlaceholder">No files selected</span>

            <button type="submit">Edit Product</button>
        </form>
        <% } else { %>
        <div class="not-available">
            <p>Product not available</p>
        </div>
        <% } %>
    </div>

    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script>
        // Sidebar toggle functionality
        const toggleButton = document.querySelector('.toggle-sidebar');
        const sidebar = document.querySelector('.sidebar');

        function toggleSidebar() {
            sidebar.classList.toggle('hidden');
            toggleButton.classList.toggle('active');
        }

        function checkViewportWidth() {
            if (window.innerWidth <= 1300) {
                sidebar.classList.add('hidden');
                toggleButton.style.display = 'block';
            } else {
                sidebar.classList.remove('hidden');
                toggleButton.style.display = 'none';
            }
        }

        toggleButton.addEventListener('click', toggleSidebar);
        checkViewportWidth();
        window.addEventListener('resize', checkViewportWidth);

        // Offer price and form validation
        document.getElementById('offerprice').addEventListener('change', validateOfferPrice);
        document.getElementById('editProductForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const nameInput = document.getElementById('productName');
            const descriptionInput = document.getElementById('productDescription');
            const priceInput = document.getElementById('productPrice');
            const stockInput = document.getElementById('productStock');
            const existingImagesInput = document.getElementById('existingImages');
            const fileInput = document.getElementById('productImages');

            const name = nameInput.value.trim();
            const description = descriptionInput.value.trim();
            const price = parseFloat(priceInput.value);
            const stock = parseInt(stockInput.value);
            const existingImages = JSON.parse(existingImagesInput.value || "[]");
            const newFiles = fileInput.files;

            const nameRegex = /^[a-zA-Z ]+$/;
            const descriptionRegex = /^[a-zA-Z0-9\s,'.]+$/;

            if (!nameRegex.test(name)) {
                swal("Error!", "Product name should contain only letters and spaces.", "error");
                return;
            }

            if (!description || !descriptionRegex.test(description)) {
                swal("Error!", "Please enter a valid product description.", "error");
                return;
            }

            if (price <= 0 || stock < 0) {
                swal("Error!", "Price and stock should be positive numbers.", "error");
                return;
            }

            if (!validateOfferPrice()) {
                return;
            }

            // Check if there is at least one image
            if (existingImages.length === 0 && newFiles.length === 0) {
                swal("Error!", "At least one product image is required.", "error");
                return;
            }

            const form = this;
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'POST',
                body: formData,
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    swal("Success!", data.message, "success").then(() => {
                        window.location.href = '/admin/productlist';
                    });
                } else {
                    swal("Error!", data.error || "Failed to update product.", "error");
                }
            })
            .catch(error => {
                console.error('Error editing product:', error);
                swal("Error!", "An error occurred while updating the product.", "error");
            });
        });

        function validateOfferPrice() {
            const offerPriceInput = document.getElementById('offerprice');
            const productPriceInput = document.getElementById('productPrice');
            const offerPrice = parseFloat(offerPriceInput.value) || 0;
            const productPrice = parseFloat(productPriceInput.value);

            if (offerPrice > productPrice) {
                swal("Error!", "Offer Price cannot be greater than Product Price.", "error");
                return false;
            }
            return true;
        }

        // Image preview and management
        let selectedFiles = [];

        function previewImages() {
            const input = document.getElementById("productImages");
            const container = document.getElementById("imagePreviews");
            const placeholder = document.getElementById("selectedImagesPlaceholder");

            if (input.files && input.files.length > 0) {
                selectedFiles = Array.from(input.files);
                placeholder.textContent = `${selectedFiles.length} file(s) selected`;

                // Append new previews without clearing existing ones
                for (const file of input.files) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const imgContainer = document.createElement("div");
                        imgContainer.className = "image-preview";
                        const index = selectedFiles.indexOf(file) + (container.childElementCount - prod.productImages.length);
                        imgContainer.setAttribute("data-index", `new-${index}`);

                        const img = document.createElement("img");
                        img.src = e.target.result;
                        img.alt = "Product Image";
                        img.className = "preview-image";

                        const deleteButton = document.createElement("button");
                        deleteButton.type = "button";
                        deleteButton.className = "delete-button";
                        deleteButton.textContent = "âœ–";
                        deleteButton.onclick = function () {
                            container.removeChild(imgContainer);
                            selectedFiles = selectedFiles.filter(f => f !== file);
                            placeholder.textContent = selectedFiles.length > 0 ? `${selectedFiles.length} file(s) selected` : "No files selected";
                        };

                        imgContainer.appendChild(img);
                        imgContainer.appendChild(deleteButton);
                        container.appendChild(imgContainer);
                    };
                    reader.readAsDataURL(file);
                }
            } else {
                selectedFiles = [];
                placeholder.textContent = "No files selected";
            }
        }

        function deleteImage(productId, index) {
            fetch(`/admin/deleteimage/${productId}/${index}`, {
                method: 'DELETE',
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    const container = document.getElementById("imagePreviews");
                    const imgContainer = container.querySelector(`[data-index='${index}']`);
                    if (imgContainer) {
                        container.removeChild(imgContainer);
                    }

                    // Update existingImages hidden input
                    const existingImagesInput = document.getElementById("existingImages");
                    let existingImages = JSON.parse(existingImagesInput.value || "[]");
                    existingImages.splice(index, 1);
                    existingImagesInput.value = JSON.stringify(existingImages);

                    swal("Success!", data.message, "success");
                } else {
                    swal("Error!", data.error || "Failed to delete image.", "error");
                }
            })
            .catch(error => {
                console.error('Error deleting image:', error);
                swal("Error!", "Failed to delete image.", "error");
            });
        }
    </script>
</body>
</html>