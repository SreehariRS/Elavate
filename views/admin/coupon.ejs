<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Coupon</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet">
</head>
<body>
  <style>
    body {
      background-color: #f8f9fa;
    }
    .container {
      max-width: 600px; /* Increased width */
      margin: 50px auto; /* Center the container */
      padding: 30px;
      background-color: #fff; /* Added background color */
      border-radius: 10px; /* Added border radius */
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); /* Added box shadow */
    }
    h1 {
      text-align: center;
    }
    form {
      margin-top: 20px;
    }
    label {
      margin-top: 10px;
    }
    button {
      margin-top: 20px;
    }
    .btn-primary {
 background-color: #000;
 color: #fff;
 padding: 10px 20px;
 border: none;
 border-radius: 5px;
 cursor: pointer;
 transition: background-color 0.3s ease, transform 0.2s ease;
 margin-left: 85px; /* Add right margin to the first button */
}

.btn-primary:hover {
  background-color: #333; /* Darkening the background color on hover */
  transform: scale(1.05); /* Scaling up the button slightly on hover */
}

.btn-secondary {
 margin-top: 20px;
 background-color: #333;
 color: #fff;
 border: none;
 border-radius: 5px;
 cursor: pointer;
 padding: 10px 20px;
 transition: background-color 0.3s ease, transform 0.2s ease;
 margin-left: 45px; /* Add left margin to the second button */
}

.btn-secondary:hover {
  background-color: #000; /* Darkening the background color on hover */
  transform: scale(1.05); /* Scaling up the button slightly on hover */
}

    #couponContainer {
      margin-top: 20px;
    }

    .sidebar.hidden {
  display: none;
}

.toggle-sidebar {
  display: none; /* Initially hide the toggle button */
}

@media screen and (max-width: 1300px) {
  .toggle-sidebar {
    display: block;
    position: absolute;
    top: 10px;
    left: 10px;
    cursor: pointer;
    z-index: 9999;
  }

  .sidebar.hidden {
    display: none;
  }
}
.toggle-sidebar.active {
  color: rgb(255, 255, 255); /* Change the color to red */
}
@media screen and (max-width: 768px) {
            .sidebar {
                width: 200px; /* Adjust sidebar width for smaller screens */
            }
            .main-content {
                margin-left: 200px; /* Adjust main content margin */
            }
        }

        @media screen and (max-width: 576px) {
            .sidebar {
                display: none; /* Hide sidebar on smaller screens */
            }
            .main-content {
                margin-left: 0; /* Adjust main content margin */
            }
        }
        @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;800&family=Poppins:wght@200;300;400;500;600;700&display=swap");

* {
  font-family: "Poppins", "sans-sarif";
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --body-color: #ffffff;
  --sidebar-color: #000000;
  --primary-color: #f4f2f2;
  --primary-color-light: #f4f2f2;
  --text-color: #ffffff;
 

  --trans-02: all 0.2s ease;
  --trans-03: all 0.3s ease;
  --trans-04: all 0.4s ease;
  --trans-04: all 0.5s ease;
}

body {
  height: 100vh;
  background-color: var(--body-color);
  transition: var(--trans-02);
}

.sidebar .text {
  font-size: 16px;
  font-weight: 500;
  color: var(--text-color);
  /* transition: var(--trans-04); */
  white-space: unset;
  opacity: 1;
}

.sidebar .image {
  min-width: 60px;
  display: flex;
  align-items: center;
}

/* Sidebar */
.sidebar {
  position: fixed;
  top: 0;
  left: 0px;
  height: 100%;
  width: 250px;
  background-color: var(--sidebar-color);
  padding: 10px 14px;
  transition: var(--trans-02);
}

.sidebar header {
  position: relative;
}
.sidebar .image-text img {
  width: 40px;
  height: 40px;
  border-radius: 10px;
}

.sidebar header .image-text {
  display: flex;
  align-items: center;
}

.header .image-text .header-text {
  display: flex;
  flex-direction: column;
}

.header-text .main {
  font-weight: 600;
}

.header-text .sub {
  margin-top: -2px;
}


.sidebar li {
  height: 50px;
  /* background-color: red; */
  margin-top: 10px;
  list-style: none;
  display: flex;
  align-items: center;
}

.sidebar li .icons {
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 60px;
  font-size: 20px;
}
.sidebar li .icons,
.sidebar li .text {
  color: var(--text-color);
  transition: var(--trans-03);
}

.sidebar li a {
  height: 100%;
  width: 100%;
  text-decoration: none;
  display: flex;
  align-items: center;
  padding-right: 50px;
  border-radius: 6px;
  transition: var(--trans-04);
  text-align: left;
}

.sidebar li a:hover {
  background: var(--primary-color);
}
.sidebar li a:hover .icons,
.sidebar li a:hover .text {
  color: var(--dark-color);
}

.sidebar .menu-bar {
  height: 100%;
  height: calc(100% - 50px);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
/* Add styles for the new navbar */
.main-content {
    margin-left: 250px; /* Adjust based on the width of the sidebar */
    padding: 0.25px;
    background-color: #ffffff; 
    justify-content: space-evenly;
    /* box-shadow: 2px  4px 8px rgba(0, 0, 0, 0.5); */
}
  </style>
  <div class="toggle-sidebar">
    <i class="bx bx-menu toggle-icon"></i>
  </div>
 <%- include('sidebar') %>

  <div class="container">
    <h1>Create Coupon</h1>
    <form action="/admin/coupon" method="POST" onsubmit="return validateForm()">
      <div class="form-group">
        <label for="code">Coupon Code:</label>
        <input type="text" class="form-control" id="code" name="code" required>
      </div>
      <div class="form-group">
        <label for="discountValue">Discount Percentage:</label>
        <input type="number" class="form-control" id="discountValue" name="discountValue" required min="1" max="99">
        <span id="discountError" class="text-danger"></span>
      </div>
      <div class="form-group">
        <label for="minPurchaseAmount">Minimum Purchase Amount (₹):</label>
        <input type="number" class="form-control" id="minPurchaseAmount" name="minPurchaseAmount" min="0" step="0.01">
      </div>
      <div class="form-group">
        <label for="maxApplicableAmount">Maximum Applicable Amount (₹):</label>
        <input type="number" class="form-control" id="maxApplicableAmount" name="maxApplicableAmount" min="0" step="0.01">
      </div>
      <div class="form-group">
        <label for="expirationDate">Expiration Date:</label>
        <input type="date" class="form-control" id="expirationDate" name="expirationDate" required>
      </div>

      <p style="color: red;"> <%= msg %></p>

      <button type="submit" class="btn btn-primary" onclick="showPopup()">Create Coupon</button>

      <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#couponModal" onclick="fetchCoupons()">
        View Available Coupons
      </button>
    </form>

    <!-- View Coupons Modal -->
    <div class="modal fade" id="couponModal" tabindex="-1" role="dialog" aria-labelledby="couponModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span>
            </button>
          </div>
          <div class="modal-body">
            <div id="couponContainer"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Coupon Modal -->
    <div class="modal fade" id="editCouponModal" tabindex="-1" role="dialog" aria-labelledby="editCouponModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="editCouponForm">
              <div class="form-group">
                <label for="editCode">Coupon Code:</label>
                <input type="text" class="form-control" id="editCode" name="code" required>
              </div>
              <div class="form-group">
                <label for="editDiscountValue">Discount Percentage:</label>
                <input type="number" class="form-control" id="editDiscountValue" name="discountValue" required min="1" max="99">
              </div>
              <div class="form-group">
                <label for="editMinPurchaseAmount">Minimum Purchase Amount (₹):</label>
                <input type="number" class="form-control" id="editMinPurchaseAmount" name="minPurchaseAmount" min="0" step="0.01">
              </div>
              <div class="form-group">
                <label for="editMaxApplicableAmount">Maximum Applicable Amount (₹):</label>
                <input type="number" class="form-control" id="editMaxApplicableAmount" name="maxApplicableAmount" min="0" step="0.01">
              </div>
              <div class="form-group">
                <label for="editExpirationDate">Expiration Date:</label>
                <input type="date" class="form-control" id="editExpirationDate" name="expirationDate" required>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="updateCoupon()">Update Coupon</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span>
            </button>
          </div>
          <div class="modal-body">
            Are you sure you want to delete this coupon?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" onclick="confirmDeleteCoupon()">Delete</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    let currentEditCouponId = null;
    let sidebarElement = null; // Renamed to avoid conflicts
    let toggleButtonElement = null; // Renamed to avoid conflicts

    function validateForm() {
      var codeInput = document.getElementById("code");
      var code = codeInput.value.trim();

      if (code === "") {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Coupon code cannot be empty',
        });
        return false;
      }

      var specialChars = /^[a-zA-Z0-9]+$/;
      if (!specialChars.test(code)) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Coupon code can only contain alphanumeric characters',
        });
        return false;
      }

      if (code.indexOf(" ") !== -1) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Coupon code cannot contain spaces',
        });
        return false;
      }

      return true;
    }

    function hidePopup() {
      var popup = document.getElementById("couponPopup");
      if (popup) {
        popup.style.display = "none";
      }
    }

    function fetchCoupons() {
      fetch('/admin/available')
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(coupons => {
          document.getElementById('couponContainer').innerHTML = '';

          if (coupons.length === 0) {
            document.getElementById('couponContainer').innerHTML = '<p class="text-center">No coupons available</p>';
            return;
          }

          coupons.forEach(coupon => {
            const couponElement = document.createElement('div');
            couponElement.className = 'card mb-2';
            couponElement.innerHTML = `
              <div class="card-body">
                <h5 class="card-title">${coupon.code}</h5>
                <p class="card-text">
                  Discount: ${coupon.discountValue}%<br>
                  Min Purchase: ₹${coupon.minPurchaseAmount || 0}<br>
                  Max Applicable: ₹${coupon.maxApplicableAmount === Infinity || coupon.maxApplicableAmount === null ? 'No Limit' : coupon.maxApplicableAmount}<br>
                  Expires on: ${new Date(coupon.expirationDate).toLocaleDateString('en-US')}
                </p>
                <button class="btn btn-primary btn-sm mr-2" onclick="editCoupon('${coupon._id}')">Edit</button>
                <button class="btn btn-danger btn-sm" onclick="deleteCoupon('${coupon._id}')">Delete</button>
              </div>
            `;
            document.getElementById('couponContainer').appendChild(couponElement);
          });
        })
        .catch(error => {
          console.error('Error fetching available coupons:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to fetch coupons',
          });
        });
    }

    function editCoupon(couponId) {
      currentEditCouponId = couponId;
      
      // Fetch coupon details
      fetch(`/admin/coupon/${couponId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(coupon => {
          // Populate the edit form
          document.getElementById('editCode').value = coupon.code;
          document.getElementById('editDiscountValue').value = coupon.discountValue;
          document.getElementById('editMinPurchaseAmount').value = coupon.minPurchaseAmount || '';
          document.getElementById('editMaxApplicableAmount').value = 
            (coupon.maxApplicableAmount === Infinity || coupon.maxApplicableAmount === null) ? '' : coupon.maxApplicableAmount;
          
          // Format date for input[type="date"]
          const date = new Date(coupon.expirationDate);
          const formattedDate = date.toISOString().split('T')[0];
          document.getElementById('editExpirationDate').value = formattedDate;
          
          // Hide the view coupons modal and show the edit modal
          $('#couponModal').modal('hide');
          $('#editCouponModal').modal('show');
        })
        .catch(error => {
          console.error('Error fetching coupon details:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to fetch coupon details',
          });
        });
    }

    function updateCoupon() {
      const formData = new FormData(document.getElementById('editCouponForm'));
      const couponData = Object.fromEntries(formData);

      // Validate form data
      if (!couponData.code.trim() || !couponData.discountValue || !couponData.expirationDate) {
        Swal.fire({
          icon: 'error',
          title: 'Validation Error',
          text: 'Please fill in all required fields',
        });
        return;
      }

      // Validate coupon code format
      var specialChars = /^[a-zA-Z0-9]+$/;
      if (!specialChars.test(couponData.code.trim())) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Format',
          text: 'Coupon code can only contain alphanumeric characters',
        });
        return;
      }

      // Validate discount value
      if (couponData.discountValue < 1 || couponData.discountValue > 99) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Discount',
          text: 'Discount must be between 1 and 99',
        });
        return;
      }

      fetch(`/admin/coupon/${currentEditCouponId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(couponData),
      })
        .then(response => {
          if (!response.ok) {
            return response.json().then(err => {
              throw new Error(err.error || 'Failed to update coupon');
            });
          }
          return response.json();
        })
        .then(data => {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Coupon updated successfully',
          });
          $('#editCouponModal').modal('hide');
          // Show the view coupons modal again and refresh the list
          $('#couponModal').modal('show');
          fetchCoupons();
        })
        .catch(error => {
          console.error('Error updating coupon:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update coupon',
          });
        });
    }

    function deleteCoupon(couponId) {
      $('#confirmationModal').data('coupon-id', couponId);
      $('#confirmationModal').modal('show');
    }

    function confirmDeleteCoupon() {
      const couponId = $('#confirmationModal').data('coupon-id');

      fetch(`/admin/coupon/${couponId}`, {
        method: 'DELETE',
      })
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('Coupon deleted successfully:', data);
          Swal.fire({
            icon: 'success',
            title: 'Deleted',
            text: 'Coupon deleted successfully',
          });
          $('#confirmationModal').modal('hide');
          fetchCoupons();
        })
        .catch(error => {
          console.error('Error deleting coupon:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to delete coupon',
          });
        });
    }

    // Sidebar toggle functionality
    function initializeSidebar() {
      toggleButtonElement = document.querySelector('.toggle-sidebar');
      sidebarElement = document.querySelector('.sidebar');

      function toggleSidebar() {
        if (sidebarElement) {
          sidebarElement.classList.toggle('hidden');
        }
        if (toggleButtonElement) {
          toggleButtonElement.classList.toggle('active');
        }
      }

      function checkViewportWidth() {
        if (window.innerWidth <= 1300) {
          if (sidebarElement) sidebarElement.classList.add('hidden');
          if (toggleButtonElement) toggleButtonElement.style.display = 'block';
        } else {
          if (sidebarElement) sidebarElement.classList.remove('hidden');
          if (toggleButtonElement) toggleButtonElement.style.display = 'none';
        }
      }

      if (toggleButtonElement) {
        toggleButtonElement.addEventListener('click', toggleSidebar);
      }
      
      checkViewportWidth();
      window.addEventListener('resize', checkViewportWidth);
    }

    // Discount value validation
    document.getElementById('discountValue').addEventListener('input', function() {
      var discountValue = this.value;
      var discountError = document.getElementById('discountError');

      if (discountValue < 1 || discountValue > 99) {
        discountError.textContent = 'Discount must be between 1 and 99';
      } else {
        discountError.textContent = '';
      }
    });

    // Edit form discount validation
    document.getElementById('editDiscountValue').addEventListener('input', function() {
      var discountValue = this.value;
      
      if (discountValue < 1 || discountValue > 99) {
        this.setCustomValidity('Discount must be between 1 and 99');
      } else {
        this.setCustomValidity('');
      }
    });

    // Handle edit modal closing and showing view modal again
    $('#editCouponModal').on('hidden.bs.modal', function () {
      // Only show the view modal if it was hidden by the edit modal
      if (!$('#couponModal').hasClass('show')) {
        $('#couponModal').modal('show');
      }
    });

    // Initialize sidebar functionality when document is ready
    $(document).ready(function() {
      initializeSidebar();
    });

    // Make sure fetchCoupons is globally available
    window.fetchCoupons = fetchCoupons;
  </script>
</body>
</html>