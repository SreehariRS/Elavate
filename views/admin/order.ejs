<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Order History</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap");

        :root {
            --body-color: #ffffff;
            --sidebar-color: #000000;
            --primary-color: #f4f2f2;
            --text-color: #ffffff;
            --trans-02: all 0.2s ease;
            --trans-03: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
        }

        body {
            min-height: 100vh;
            background-color: var(--body-color);
            display: flex;
        }

        /* Main Content */
        .main-content {
            margin-left: 250px;
            padding: 20px;
            width: calc(100% - 250px);
            background-color: #f5f7f9;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eaeaea;
        }

        .page-title {
            font-size: 24px;
            font-weight: 600;
            color: #2c3e50;
            margin: 0;
        }

        .header-actions {
            display: flex;
            gap: 10px;
        }

        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .stat-card {
            background: #fff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
            border-left: 4px solid #4e73df;
        }

        .stat-card.primary {
            border-left-color: #4e73df;
        }

        .stat-card.success {
            border-left-color: #1cc88a;
        }

        .stat-card.info {
            border-left-color: #36b9cc;
        }

        .stat-card.warning {
            border-left-color: #f6c23e;
        }

        .stat-title {
            color: #5a5c69;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            margin-bottom: 8px;
        }

        .stat-value {
            color: #2c3e50;
            font-size: 24px;
            font-weight: 700;
        }

        .filters-container {
            background: #f8f9fc;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 25px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }

        .filter-group {
            margin-bottom: 0;
        }

        .filter-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4e4e4e;
            font-size: 14px;
        }

        .search-input {
            width: 100%;
            padding: 10px 15px;
            border-radius: 8px;
            border: 1px solid #d1d3e2;
            transition: all 0.3s;
        }

        .search-input:focus {
            border-color: #4e73df;
            box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
            outline: none;
        }

        .search-button {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            background-color: #4e73df;
            color: white;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s;
        }

        .search-button:hover {
            background-color: #3a56c4;
        }

        .price-inputs {
            display: flex;
            gap: 10px;
        }

        .price-inputs input {
            flex: 1;
        }

        .table-container {
            overflow-x: auto;
            border-radius: 10px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            font-size: 14px;
        }

        th {
            background-color: #4e73df;
            color: white;
            font-weight: 600;
            padding: 15px 12px;
            text-align: left;
            position: sticky;
            top: 0;
        }

        td {
            padding: 12px;
            border-bottom: 1px solid #e3e6f0;
            vertical-align: middle;
        }

        tr {
            transition: background-color 0.2s;
        }

        tr:nth-child(even) {
            background-color: #f8f9fc;
        }

        tr:hover {
            background-color: #eaecf4;
        }

        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            display: inline-block;
        }

        .status-confirmed {
            background-color: #e8f4ff;
            color: #0066cc;
        }

        .status-delivered {
            background-color: #e6f4ee;
            color: #0a8150;
        }

        .status-cancelled, .status-returned, .status-refunded {
            background-color: #fef3f2;
            color: #b42318;
        }

        .status-pending, .status-cancellation-requested, .status-return-requested, .status-refunded-requested {
            background-color: #fffaeb;
            color: #b54708;
        }

        .action-btn {
            padding: 6px 12px;
            border-radius: 5px;
            font-size: 12px;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-view {
            background-color: #e8f4ff;
            color: #0066cc;
        }

        .btn-view:hover {
            background-color: #cce5ff;
        }

        .btn-approve {
            background-color: #e6f4ee;
            color: #0a8150;
        }

        .btn-approve:hover {
            background-color: #ceeadf;
        }

        .pagination-info {
            margin-top: 15px;
            font-size: 14px;
            color: #6e6e6e;
        }

        @media (max-width: 992px) {
            .main-content {
                margin-left: 0;
                width: 100%;
            }
            
            .filters-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
   <%- include('sidebar') %>
    <div class="main-content">
        <div class="container">
            <div class="page-header">
                <h1 class="page-title">Order History</h1>
                <div class="header-actions">
                    <button class="btn btn-primary"><i class="fas fa-download"></i> Export</button>
                    <button class="btn btn-outline-secondary"><i class="fas fa-filter"></i> More Filters</button>
                </div>
            </div>

            <div class="stats-cards">
                <div class="stat-card primary">
                    <div class="stat-title">Total Orders</div>
                    <div class="stat-value" id="totalOrders">0</div>
                </div>
                <div class="stat-card success">
                    <div class="stat-title">Completed Orders</div>
                    <div class="stat-value" id="completedOrders">0</div>
                </div>
                <div class="stat-card info">
                    <div class="stat-title">Pending Orders</div>
                    <div class="stat-value" id="pendingOrders">0</div>
                </div>
                <div class="stat-card warning">
                    <div class="stat-title">Cancelled Orders</div>
                    <div class="stat-value" id="cancelledOrders">0</div>
                </div>
            </div>

            <div class="filters-container">
                <div class="filter-group">
                    <label class="filter-label">Search Orders</label>
                    <input type="text" class="search-input" placeholder="Order ID, Customer, Product..." id="searchInput">
                </div>
                <div class="filter-group">
                    <label class="filter-label">Price Range</label>
                    <div class="price-inputs">
                        <input type="number" class="search-input" placeholder="Min Price" id="minPrice">
                        <input type="number" class="search-input" placeholder="Max Price" id="maxPrice">
                    </div>
                </div>
                <div class="filter-group">
                    <label class="filter-label">&nbsp;</label>
                    <button class="search-button" onclick="searchOrders()"><i class="fas fa-search"></i> Search</button>
                    <button class="search-button" id="filterPrice"><i class="fas fa-filter"></i> Apply Filters</button>
                </div>
            </div>

<div class="table-container">
    <table id="orderTable" class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Customer</th>
                <th>Address</th>
                <th>Date</th>
                <th>Products</th>
                <th>Quantity</th>
                <th>Item Total</th>
                <th>Order Total</th>
                <th>Status</th>
                <th>Payment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% for (const userId in ordersByUser) { %>
                <% ordersByUser[userId].forEach(order => { %>
                    <% 
                    // Check if entire order cancellation should be shown
                    let showEntireCancellationButton = order.status === 'cancellation-requested' && order.items.length > 1;
                    let allItemsCancellationRequested = order.items.every(item => item.status === 'cancellation-requested');
                    showEntireCancellationButton = showEntireCancellationButton && allItemsCancellationRequested;
                    %>
                    
                    <tr class="order-row">
                        <td>
                            <%= String(order._id).slice(-4) %>
                            <% if (showEntireCancellationButton) { %>
                                <div>
                                    <button class="action-btn btn-approve" onclick="approveRequest('<%= order._id %>', undefined, 'cancellation')">
                                        Approve Entire Order Cancellation
                                    </button>
                                    <button class="action-btn btn-view" onclick="showCancellationReason('<%= order.cancellationReason %>')">
                                        <i class="fas fa-eye"></i> View Reason
                                    </button>
                                </div>
                            <% } %>
                        </td>
                        <td><%= order.userId ? order.userId.firstname : 'N/A' %></td>
                        <td><%= order.selectedAddress || 'N/A' %></td>
                        <td><%= order.date ? order.date.toLocaleString() : 'N/A' %></td>
                        <td>
                            <% order.items.forEach((item, index) => { %>
                                <div><%= item.productId ? item.productId.name : 'N/A' %></div>
                            <% }); %>
                        </td>
                        <td>
                            <% order.items.forEach((item, index) => { %>
                                <div><%= item.quantity %></div>
                            <% }); %>
                        </td>
                        <td>
                            <% order.items.forEach((item, index) => { %>
                                <div>₹<%= item.productId ? (item.productId.offerprice || item.productId.price) * item.quantity : 'N/A' %></div>
                            <% }); %>
                        </td>
                        <td>₹<%= order.totalPrice.toFixed(2) %></td>
                        <td>
                            <% order.items.forEach((item, index) => { %>
                                <div class="status-controls" style="margin-bottom: 10px;">
                                    <% if (item.status === 'cancelled' || item.status === 'returned' || item.status === 'refunded') { %>
                                        <span class="status-badge status-<%= item.status %>">
                                            <%= item.status.charAt(0).toUpperCase() + item.status.slice(1) %>
                                        </span>
                                        <button class="action-btn btn-view" onclick="showCancellationReason('<%= item.cancellationReason %>')">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    <% } else if (item.status === 'return-requested' || item.status === 'refund-requested' || (item.status === 'cancellation-requested' && !showEntireCancellationButton)) { %>
                                        <span class="status-badge status-<%= item.status %>">
                                            <%= item.status.charAt(0).toUpperCase() + item.status.slice(1) %>
                                        </span>
                                        <button class="action-btn btn-approve <%= item.status !== 'return-requested' ? 'd-none' : '' %>" 
                                            onclick="approveRequest('<%= order._id %>', '<%= index %>', 'return')">
                                            <i class="fas fa-check"></i> Approve Return
                                        </button>
                                        <button class="action-btn btn-approve <%= item.status !== 'refund-requested' ? 'd-none' : '' %>" 
                                            onclick="approveRequest('<%= order._id %>', '<%= index %>', 'refund')">
                                            <i class="fas fa-check"></i> Approve Refund
                                        </button>
                                        <button class="action-btn btn-approve <%= (item.status !== 'cancellation-requested' || showEntireCancellationButton) ? 'd-none' : '' %>" 
                                            onclick="approveRequest('<%= order._id %>', '<%= index %>', 'cancellation')">
                                            <i class="fas fa-check"></i> Approve Cancellation
                                        </button>
                                    <% } else if (item.status === 'cancellation-requested' && showEntireCancellationButton) { %>
                                        <span class="status-badge status-cancellation-requested">
                                            <%= item.status.charAt(0).toUpperCase() + item.status.slice(1) %>
                                        </span>
                                    <% } else { %>
                                        <select id="orderStatusDropdown_<%= order._id %>_<%= index %>" 
                                            onchange="updateOrderStatus('<%= order._id %>', '<%= index %>')"
                                            class="form-select form-select-sm">
                                            <option value="confirmed" <%= item.status === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                                            <option value="out for delivery" <%= item.status === 'out for delivery' ? 'selected' : '' %>>Out for Delivery</option>
                                            <option value="delivered" <%= item.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                                        </select>
                                    <% } %>
                                </div>
                            <% }); %>
                        </td>
                        <td><%= order.paymentMethod || 'N/A' %></td>
                        <td>
                            <button class="action-btn btn-view" onclick="showOrderDetails('<%= order._id %>')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <% order.items.forEach((item, index) => { %>
                                <% if (item.status === 'return-requested' || item.status === 'refund-requested' || item.status === 'cancellation-requested') { %>
                                    <button class="action-btn btn-approve" onclick="approveRequest('<%= order._id %>', '<%= index %>', '<%= item.status.split('-')[0] %>')">
                                        <i class="fas fa-check"></i>
                                    </button>
                                <% } %>
                            <% }); %>
                        </td>
                    </tr>
                <% }); %>
            <% } %>
        </tbody>
    </table>
</div>
            <div class="pagination-info" id="paginationInfo">
                Showing 0 to 0 of 0 entries
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
    <script>
        $(document).ready(function () {
            const table = $('#orderTable').DataTable({
                paging: true,
                ordering: true,
                info: true,
                searching: false,
                pageLength: 10,
                language: {
                    emptyTable: "No orders available"
                }
            });

            // Update pagination info dynamically
            table.on('draw', function () {
                const info = table.page.info();
                document.getElementById('paginationInfo').textContent = 
                    `Showing ${info.start + 1} to ${Math.min(info.end, info.recordsTotal)} of ${info.recordsTotal} entries`;
            });
        });

function updateStats() {
    let totalOrders = 0, completedOrders = 0, pendingOrders = 0, cancelledOrders = 0;

    // Iterate over each order row in the table
    document.querySelectorAll('#orderTable tbody tr.order-row').forEach(row => {
        totalOrders++;
        
        // Check if all items in this order are delivered
        const statusControls = row.querySelectorAll('.status-controls');
        let allDelivered = true;
        let anyCancelledOrReturned = false;
        
        statusControls.forEach(control => {
            const statusBadge = control.querySelector('.status-badge');
            const statusSelect = control.querySelector('select');
            
            let status = '';
            if (statusBadge) {
                status = statusBadge.textContent.trim().toLowerCase();
            } else if (statusSelect) {
                status = statusSelect.value.toLowerCase();
            }
            
            if (status !== 'delivered') allDelivered = false;
            if (status === 'cancelled' || status === 'returned') anyCancelledOrReturned = true;
        });
        
        if (allDelivered) completedOrders++;
        if (!allDelivered && !anyCancelledOrReturned) pendingOrders++;
        if (anyCancelledOrReturned) cancelledOrders++;
    });

    // Update the stats cards
    document.getElementById('totalOrders').textContent = totalOrders;
    document.getElementById('completedOrders').textContent = completedOrders;
    document.getElementById('pendingOrders').textContent = pendingOrders;
    document.getElementById('cancelledOrders').textContent = cancelledOrders;
}

    // Initialize the page
    updateStats();
        function updateOrderStatus(orderId, itemId) {
            const newStatus = document.getElementById(`orderStatusDropdown_${orderId}_${itemId}`).value;
            fetch('/admin/updateorder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId, itemId, newStatus })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Status Updated',
                        text: 'Item status updated successfully!',
                        timer: 2000
                    }).then(() => window.location.reload());
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Update Failed',
                        text: data.message || 'Failed to update item status.'
                    });
                }
            })
            .catch(error => {
                console.error('Error updating status:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Update Failed',
                    text: 'An error occurred while updating the status.'
                });
            });
        }

        function approveRequest(orderId, itemId, requestType) {
            Swal.fire({
                title: `Approve ${requestType.charAt(0).toUpperCase() + requestType.slice(1)}?`,
                text: itemId === undefined 
                    ? `Are you sure you want to approve the ${requestType} for the entire order ${orderId.slice(-4)}?`
                    : `Are you sure you want to approve the ${requestType} for item in order ${orderId.slice(-4)}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: `Yes, approve ${requestType}`
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/admin/approve-request', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ orderId, itemId, requestType })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: `${requestType.charAt(0).toUpperCase() + requestType.slice(1)} Approved`,
                                text: data.message,
                                timer: 2000
                            }).then(() => window.location.reload());
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Approval Failed',
                                text: data.message || 'Failed to approve the request.'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error approving request:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Approval Failed',
                            text: 'An error occurred while approving the request.'
                        });
                    });
                }
            });
        }

        function showCancellationReason(reason) {
            Swal.fire({
                title: 'Cancellation Reason',
                text: reason || 'No reason provided',
                icon: 'info'
            });
        }

        function showOrderDetails(orderId) {
            Swal.fire({
                title: 'Order Details',
                text: `Details for Order ID: ${orderId.slice(-4)}`,
                icon: 'info'
            });
        }

        function searchOrders() {
            const searchInput = document.getElementById("searchInput").value.toLowerCase();
            const orderRows = document.querySelectorAll('.order-row');
            let found = false;
            orderRows.forEach(row => {
                const orderId = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
                const userId = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                const address = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                const productName = row.querySelector('td:nth-child(5)').textContent.toLowerCase();
                if (orderId.includes(searchInput) || userId.includes(searchInput) || address.includes(searchInput) || productName.includes(searchInput)) {
                    row.style.display = 'table-row';
                    found = true;
                } else {
                    row.style.display = 'none';
                }
            });
            if (!found) {
                Swal.fire({
                    title: 'No Results Found',
                    text: 'No orders match the search criteria.',
                    icon: 'info'
                });
            }
        }

        document.getElementById('filterPrice').addEventListener('click', filterOrdersByPrice);

        function filterOrdersByPrice() {
            const minPrice = parseFloat(document.getElementById('minPrice').value) || 0;
            const maxPrice = parseFloat(document.getElementById('maxPrice').value) || Infinity;
            const orderRows = document.querySelectorAll('.order-row');
            let found = false;
            orderRows.forEach(row => {
                const orderTotal = parseFloat(row.querySelector('td:nth-child(8)').textContent.replace('₹', '')) || 0;
                if (orderTotal >= minPrice && orderTotal <= maxPrice) {
                    row.style.display = 'table-row';
                    found = true;
                } else {
                    row.style.display = 'none';
                }
            });
            if (!found) {
                Swal.fire({
                    title: 'No Results Found',
                    text: 'No orders match the price range.',
                    icon: 'info'
                });
            }
        }
    </script>
</body>
</html>