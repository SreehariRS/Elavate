<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="stylesheet/admin/home.css">

    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
  </head>

  <body>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Poppins", sans-serif;
        min-height: 100vh;
        background-color: #f8f9fc; /* Updated to lighter background for modern theme */
        overflow-x: hidden;
      }

      /* Main Content Area */
      .content {
        margin-left: 200px;
        padding: 20px;
        padding-top: 30px;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        flex-wrap: wrap;
        gap: 20px; /* Added gap for better spacing */
      }

      .chart-container canvas {
        max-width: 400px; /* Increased size for better visibility */
        max-height: 400px;
        width: 100%;
        height: auto;
      }

      .overview-item {
        flex-basis: calc(25% - 20px);
        background-color: #ffffff; /* Updated to white for clean theme */
        border-radius: 10px; /* Softer borders */
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Softer shadow */
        text-align: center;
        transition: transform 0.3s ease;
      }

      .overview-item:hover {
        transform: translateY(-5px);
      }

      .overview-item h3 {
        margin-top: 0;
        color: #333; /* Dark text for better contrast */
        text-transform: uppercase;
        font-size: 1.2em;
      }

      .overview-item p {
        margin: 0;
        font-size: 1.8em; /* Larger font for emphasis */
        font-weight: bold;
        color: #007bff; /* Blue accent color */
      }

      .chart {
        max-width: 900px;
        height: 450px;
        padding: 20px;
        margin: 0 auto;
        background-color: #ffffff; /* White background for charts */
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      .chart .chart_types {
        text-align: center;
        margin-bottom: 30px;
      }

      .chart .chart_types button {
        padding: 10px 25px;
      }

      /* Adjust width of chart containers */
      .chart-container {
        width: calc(50% - 20px);
        margin-bottom: 20px;
      }

      .chart-container canvas {
        max-width: 100%;
        height: auto;
      }

      .time-filters {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
      }

      .time-filters button {
        margin: 0 10px;
        background-color: #007bff; /* Blue buttons */
        color: white;
        border: none;
      }

      .time-filters button:hover {
        background-color: #0056b3;
      }

      /* Top Selling Products */
      .overview-item.top-selling-products,
      .overview-item.top-selling-category {
        background-color: #ffffff;
        color: #333;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: left;
        flex-basis: calc(25% - 20px);
        margin: 0; /* Removed custom margins for flex handling */
      }

      .overview-item.top-selling-products ul,
      .overview-item.top-selling-category ul {
        list-style: none;
        padding: 0;
      }

      .overview-item.top-selling-products li,
      .overview-item.top-selling-category li {
        color: #333;
        margin-bottom: 10px;
        font-size: 1em;
      }

      .sidebar.hidden {
        display: none;
      }

      .toggle-sidebar {
        display: none;
      }

      @media screen and (max-width: 1300px) {
        .toggle-sidebar {
          display: block;
          position: absolute;
          top: 10px;
          left: 10px;
          cursor: pointer;
          z-index: 9999;
        }

        .sidebar.hidden {
          display: none;
        }
      }

      .toggle-sidebar.active {
        color: #007bff; /* Updated toggle color */
      }

      @media screen and (max-width: 768px) {
        .sidebar {
          width: 200px;
        }
        .main-content {
          margin-left: 200px;
        }
      }

      @media screen and (max-width: 576px) {
        .sidebar {
          display: none;
        }
        .main-content {
          margin-left: 0;
        }
      }

      @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;800&family=Poppins:wght@200;300;400;500;600;700&display=swap");

      :root {
        --body-color: #f8f9fc;
        --sidebar-color: #007bff; /* Updated sidebar to blue */
        --primary-color: #ffffff;
        --primary-color-light: #e9ecef;
        --text-color: #ffffff;
        --trans-02: all 0.2s ease;
        --trans-03: all 0.3s ease;
        --trans-04: all 0.4s ease;
        --trans-05: all 0.5s ease;
      }

      .sidebar .text {
        font-size: 16px;
        font-weight: 500;
        color: var(--text-color);
        white-space: unset;
        opacity: 1;
      }

      .sidebar .image {
        min-width: 60px;
        display: flex;
        align-items: center;
      }

      /* Sidebar */
      .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        width: 250px;
        background-color: var(--sidebar-color);
        padding: 10px 14px;
        transition: var(--trans-02);
      }

      .sidebar header {
        position: relative;
      }

      .sidebar .image-text img {
        width: 40px;
        height: 40px;
        border-radius: 10px;
      }

      .sidebar header .image-text {
        display: flex;
        align-items: center;
      }

      .header .image-text .header-text {
        display: flex;
        flex-direction: column;
      }

      .header-text .main {
        font-weight: 600;
      }

      .header-text .sub {
        margin-top: -2px;
      }

      .sidebar li {
        height: 50px;
        margin-top: 10px;
        list-style: none;
        display: flex;
        align-items: center;
      }

      .sidebar li .icons {
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 60px;
        font-size: 20px;
      }

      .sidebar li .icons,
      .sidebar li .text {
        color: var(--text-color);
        transition: var(--trans-03);
      }

      .sidebar li a {
        height: 100%;
        width: 100%;
        text-decoration: none;
        display: flex;
        align-items: center;
        padding-right: 50px;
        border-radius: 6px;
        transition: var(--trans-04);
        text-align: left;
      }

      .sidebar li a:hover {
        background: var(--primary-color);
      }

      .sidebar li a:hover .icons,
      .sidebar li a:hover .text {
        color: #007bff;
      }

      .sidebar .menu-bar {
        height: calc(100% - 50px);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }

      .containerfirst {
        max-width: 89%;
        margin: 0 auto;
      }

      .space {
        margin-left: 200px;
        padding: 20px;
        padding-top: 30px;
      }

      .overview-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        gap: 20px; /* Added gap */
      }

      .overview-row .overview-item {
        flex-basis: calc(50% - 20px);
        background-color: #ffffff; /* Consistent white */
      }

      .overview-item:nth-child(odd) {
        background-color: #e9ecef; /* Light gray for odd items */
      }

      .overview-item:nth-child(even) {
        background-color: #ffffff; /* White for even */
      }
    </style>
    <!-- Sidebar Navigation -->
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <div class="toggle-sidebar">
      <i class="bx bx-menu toggle-icon"></i>
    </div>
    <%- include('sidebar') %>

    <div class="containerfirst">
      <div class="space" style="margin-left: 250px;">
        <!-- Overview rows -->
        <div class="overview-row">
          <div class="overview-item overall-sales">
            <h3>Overall Sales Amount</h3>
            <p>â‚¹<%= data.totalAmount %></p>
          </div>
          <div class="overview-item overall-order-amount">
            <h3>Total Orders</h3>
            <p><%= data.totalOrders %></p>
          </div>
        </div>

        <div class="overview-row">
          <div class="overview-item overall-discount">
            <h3>Total Users</h3>
            <p><%= data.user %></p>
          </div>
          <div class="overview-item total-product-numbers">
            <h3>Total Products</h3>
            <p><%= data.product %></p>
          </div>
        </div>
      </div>

      <!-- Time Filters -->
      <div class="time-filters">
        <button id="dayFilterBtn" class="btn" onclick="filterData('day')">1 Day</button>
        <button id="weekFilterBtn" class="btn" onclick="filterData('week')">1 Week</button>
        <button id="monthFilterBtn" class="btn" onclick="filterData('month')">1 Month</button>
        <button id="yearFilterBtn" class="btn" onclick="filterData('year')">1 Year</button>
      </div>

      <div class="content">
        <!-- Top Selling Products List -->
        <div class="overview-item top-selling-products">
          <h3>Top Selling Products</h3>
          <ul>
            <% topSellingProducts.forEach(product => { %>
            <li><%= product.name %></li>
            <% }); %>
          </ul>
        </div>

        <!-- Chart for Products -->
        <div class="chart-container">
          <h2>Top Selling Products</h2>
          <canvas id="barChartProducts"></canvas>
        </div>

        <!-- Chart for Categories -->
        <div class="chart-container">
          <h2>Top Selling Categories</h2>
          <canvas id="barChartCategories"></canvas>
        </div>

        <!-- Top Selling Categories List -->
        <div class="overview-item top-selling-category">
          <h3>Top Selling Categories</h3>
          <ul>
            <% topSellingCategories.forEach((category, index) => { %>
            <li><%= index + 1 %>. <%= category._id %></li>
            <% }); %>
          </ul>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
   let currentFilter = "year";
   let barProductsCtx, barCategoriesCtx;

   document.addEventListener("DOMContentLoaded", function () {
      barProductsCtx = document.getElementById("barChartProducts").getContext("2d");
      barCategoriesCtx = document.getElementById("barChartCategories").getContext("2d");

      // Fetch graph data initially
      fetchGraphData("doughnut-graph", barProductsCtx, createStackedLineChart);
      fetchGraphData("doughnut-category-graph", barCategoriesCtx, createLineCategoryChart);
   });

   async function fetchGraphData(graphType, ctx, createChartFunc, currentFilter) {
      try {
         const response = await fetch(`/admin/${graphType}?filter=${currentFilter}`, {
            method: "POST",
            headers: {
               "Content-Type": "application/json",
            },
            body: JSON.stringify({}),
         });
         if (!response.ok) {
            throw new Error("Network response was not ok.");
         }
         const data = await response.json();

         if (graphType === "doughnut-graph") {
            const labels = data.map((product) => product.name);
            const values = data.map((product) => product.count);
            createChartFunc(ctx, labels, values);
         } else if (graphType === "doughnut-category-graph") {
            const labels = data.map((category) => category._id);
            const values = data.map((category) => category.count);
            createChartFunc(ctx, labels, values);
         }
      } catch (error) {
         console.error(`Error fetching ${graphType} data:`, error);
      }
   }

   function filterData(filter) {
      currentFilter = filter;
      fetchGraphData('doughnut-graph', barProductsCtx, createStackedLineChart, currentFilter);
      fetchGraphData('doughnut-category-graph', barCategoriesCtx, createLineCategoryChart, currentFilter);
   }

   function createStackedLineChart(ctx, labels, values) {
      if (ctx.chart) {
         ctx.chart.destroy();
      }

      // Calculate threshold for high sales (e.g., median or top 50th percentile)
      const sortedValues = [...values].sort((a, b) => b - a);
      const threshold = sortedValues[Math.floor(sortedValues.length / 2)] || 0;

      // Split data into high and moderate sales
      const highSalesValues = values.map((value, index) => (value >= threshold ? value : 0));
      const moderateSalesValues = values.map((value, index) => (value < threshold ? value : 0));

      ctx.chart = new Chart(ctx, {
         type: 'line',
         data: {
            labels: labels,
            datasets: [
               {
                  label: 'High Sales Products',
                  data: highSalesValues,
                  backgroundColor: 'rgba(0, 123, 255, 0.3)',
                  borderColor: '#007bff',
                  borderWidth: 2,
                  fill: true,
                  tension: 0.4,
                  pointRadius: 5,
                  pointBackgroundColor: '#007bff',
                  pointBorderColor: '#fff',
                  pointHoverBackgroundColor: '#fff',
                  pointHoverBorderColor: '#007bff',
               },
               {
                  label: 'Moderate Sales Products',
                  data: moderateSalesValues,
                  backgroundColor: 'rgba(255, 99, 132, 0.3)',
                  borderColor: '#ff6384',
                  borderWidth: 2,
                  fill: true,
                  tension: 0.4,
                  pointRadius: 5,
                  pointBackgroundColor: '#ff6384',
                  pointBorderColor: '#fff',
                  pointHoverBackgroundColor: '#fff',
                  pointHoverBorderColor: '#ff6384',
               }
            ]
         },
         options: {
            scales: {
               y: {
                  beginAtZero: true,
                  stacked: true,
                  grid: {
                     color: "rgba(0, 0, 0, 0.1)",
                  },
               },
               x: {
                  grid: {
                     display: false,
                  },
               },
            },
            plugins: {
               legend: {
                  display: true,
                  position: 'top',
               },
               tooltip: {
                  callbacks: {
                     label: function(context) {
                        const datasetLabel = context.dataset.label || '';
                        const value = context.raw;
                        const index = context.dataIndex;
                        const productLabel = labels[index];
                        return value > 0 ? `${datasetLabel}: ${productLabel} (${value})` : '';
                     }
                  }
               }
            },
         }
      });
   }

   function createLineCategoryChart(ctx, labels, values) {
      if (ctx.chart) {
         ctx.chart.destroy();
      }

      ctx.chart = new Chart(ctx, {
         type: "line",
         data: {
            labels: labels,
            datasets: [
               {
                  label: "Top Selling Categories",
                  data: values,
                  backgroundColor: "rgba(0, 123, 255, 0.1)",
                  borderColor: "#007bff",
                  borderWidth: 2,
                  fill: true,
                  tension: 0.4,
                  pointBackgroundColor: "#007bff",
                  pointBorderColor: "#fff",
                  pointHoverBackgroundColor: "#fff",
                  pointHoverBorderColor: "#007bff",
               },
            ],
         },
         options: {
            scales: {
               y: {
                  beginAtZero: true,
                  grid: {
                     color: "rgba(0, 0, 0, 0.1)",
                  },
               },
               x: {
                  grid: {
                     display: false,
                  },
               },
            },
            plugins: {
               legend: {
                  display: false,
               },
            },
         },
      });
   }
</script>
    <script>
      // JavaScript for toggling sidebar
      const toggleButton = document.querySelector('.toggle-sidebar');
      const sidebar = document.querySelector('.sidebar');
      
      function toggleSidebar() {
        sidebar.classList.toggle('hidden');
        toggleButton.classList.toggle('active');
      }
      
      function checkViewportWidth() {
        if (window.innerWidth <= 1300) {
          sidebar.classList.add('hidden');
          toggleButton.style.display = 'block';
        } else {
          sidebar.classList.remove('hidden');
          toggleButton.style.display = 'none';
        }
      }
      
      toggleButton.addEventListener('click', function() {
        toggleSidebar();
      });
      
      checkViewportWidth();
      window.addEventListener('resize', checkViewportWidth);
    </script>
  </body>
</html>