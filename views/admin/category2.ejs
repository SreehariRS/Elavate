<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Category Edit Page</title>
  <style>
    /* Add this CSS to your existing styles */
    /* General reset */
    body, h2, input, button {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }

    body {
        padding: 0;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 70vh;
    }

    .container {
      position: relative; /* Ensure close button is positioned relative to container */
      max-width: 400px; /* Adjust the width as needed */
      width: 80%; /* Add width to the container */
      margin: 0 auto;
      background-color: #fff;
      padding: 30px; /* Increase padding for larger appearance */
      border-radius: 12px; /* Increase border-radius for rounded corners */
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.2); /* Increase box shadow for depth */
    }

    .close-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
    }

    h2 {
      margin-bottom: 30px; /* Increase margin-bottom for spacing */
      color: #333;
      text-align: center;
      font-size: 24px; /* Increase font size for larger heading */
    }

    .edit-form {
      display: flex;
      flex-direction: column; /* Align items vertically */
    }

    .edit-form input[type="text"] {
      padding: 12px; /* Increase padding for input field */
      border: 1px solid #ccc;
      border-radius: 6px;
      text-align: center;
      font-size: 16px; /* Increase font size for input field */
      margin-bottom: 20px; /* Increase margin-bottom for spacing */
    }

    .edit-form button {
      padding: 12px 24px; /* Increase padding for button */
      background-color: #0e0e0e;
      color: #fff;
      border: none;
      cursor: pointer;
      border-radius: 6px;
      transition: background-color 0.3s ease;
      font-size: 16px; /* Increase font size for button */
    }

    .edit-form button:hover {
      background-color: #282828;
    }

    .error-message {
      color: red;
      font-size: 14px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="close-btn" onclick="closeContainer()">X</div>
    <form id="editCategoryForm">
      <h2>Edit Category Name</h2>
      <% if (data) { %>
      <div class="edit-form">
          <input type="text" id="categoryName" name="categoryName" placeholder="Enter new category name" value="<%= data.name %>">
          <p style="color: red;" id="message"></p>
          <button type="button" id="updateBtn" onclick="editcat('<%= data.id %>')">Update</button>
          <% } else { %>
            <p>This category is currently unavailable.</p>
        <% } %>
      </div>
  </form>
  
  </div>
<!-- Include this div to display error messages -->
<div id="errorMessageContainer" class="error-message"></div>

<script>
    function closeContainer() {
    window.location.href = '/admin/category'; // Redirect to /admin/category
  }
</script>

<script>
  const message = document.getElementById("message");

  function editcat(id) {
      // Retrieve the category name input field
      const categoryNameInput = document.getElementById("categoryName");
      const categoryName = categoryNameInput.value.trim();

      // Regular expression to check if the category name contains any numbers
      const containsNumbers = /\d/.test(categoryName);

      // Regular expression to check if the category name contains any symbols or special characters
      const containsSymbols = /[!@#$%^&*(),.?":{}|<>=_-]/.test(categoryName);

      // Check if the category name is empty
      if (!categoryName) {
          message.textContent = "Category name cannot be empty.";
          return;
      }
      
      // Check if the category name contains numbers
      if (containsNumbers) {
          message.textContent = "Category name cannot contain numbers.";
          return;
      }

      // Check if the category name contains symbols or special characters
      if (containsSymbols) {
          message.textContent = "Category name cannot contain symbols or special characters.";
          return;
      }

      // Construct the data object to be sent
      const data = {
          categoryName: categoryName
      };

      // Perform the fetch request to update the category
      fetch(`/admin/category/${id}`, {
          method: "POST",
          headers: {
              "Content-Type": "application/json"
          },
          body: JSON.stringify(data)
      })
      .then(response => {
          if (!response.ok) {
              throw new Error("Category name already exists");
          }
          return response.json();
      })
      .then(result => {
          // Handle the result
          if (result.success) {
              window.location.href = "/admin/category"; // Redirect to category page if update is successful
          } else if (result.message) {
              message.textContent = "Category name " + result.message; // Display custom message if provided by the server
          } else {
              message.textContent =  result.error; 
          }
      })
      .catch(error => {
          message.textContent =  error.message;
      });
  };
</script>



</body>
</html>
