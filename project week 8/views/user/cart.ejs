








<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.11.0/mdb.min.js"></script>
    <script src="https://kit.fontawesome.com/bdf5ca2238.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-HjWTaj0X2ZqbuxOXz5m9pfRqCsI0i2O3evR5Fn2TtrNT6Zmd25FuXtRT5U9M1efTTrT7oLh+j/Y9BKcRnNQ8IQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    
    <style>
        /* Your CSS styles here */
        body {
                font-family: Arial, sans-serif;
                background-color: #1c1b1b;
                margin: 0;
                padding: 0;
            }
            @import url('https://fonts.googleapis.com/css?family=Roboto:400,500,700');
*
{
    -webkit-box-sizing: border-box;
            box-sizing: border-box;
    margin: 0;
    padding: 0;
}
body {
    padding-top: 56px; /* Adjust based on the height of your navbar */
    font-family: 'Poppins', sans-serif;
    margin: 0;
    padding: 0;
    /* display: flex; */
    
}





.section-padding{
    padding: 100px 0; 
    }

            .cart {
                max-width: 800px;
                margin: 90px auto;
                background-color: #fff;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
            .home-link {
            display: inline-block;
            padding: 10px 20px;
            margin: 10px 20px;
            text-decoration: none;
            color: #080808;
            background-color: #00000000;
            border-radius: 10px;
            transition: background-color 1s, color 2s;
        }

        .home-link:hover {
            background-color: #0000006d;
            color: rgb(255, 255, 255);
        }

            .cart-title {
                padding: 20px;
                font-size: 1.5rem;
                font-weight: bold;
                border-bottom: 1px solid #ccc;
            }

            .cart-table {
                width: 100%;
                border-collapse: collapse;
            }

            .cart-table th,
            .cart-table td {
                padding: 15px;
                text-align: left;
                border-bottom: 1px solid #eee;
            }

            .cart-table th:first-child,
            .cart-table td:first-child {
                padding-left: 20px;
            }

            .cart-table th:last-child,
            .cart-table td:last-child {
                padding-right: 20px;
            }

            .product-image {
                max-width: 80px;
                max-height: 80px;
                border-radius: 4px;
            }

            .quantity-input {
                width: 60px;
                padding: 5px;
                border: 1px solid #ccc;
                border-radius: 4px;
                text-align: center;
            }

            .remove-btn {
                padding: 8px 15px;
                background-color: #ff4c57;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            .remove-btn:hover {
                background-color: #d1404a;
            }

            .cart-footer {
                padding: 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .total-price {
                font-size: 1.2rem;
                font-weight: bold;
            }

            .checkout-btn {
                padding: 12px 25px;
                background-color: #4caf50;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
            }

            .checkout-btn:hover {
                background-color: #45a049;
            }

            .empty-cart-message {
                text-align: center;
                padding: 20px;
                display: none;
                animation: fadeIn 0.5s ease-out forwards;
            }

            @keyframes fadeIn {
                from {
                    opacity: 0;
                }
                to {
                    opacity: 1;
                }
            }

            .shop-now-btn {
                padding: 10px 20px;
                background-color: #ff4c57;
                color: #fff;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                transition: background-color 0.3s;
                animation: slideIn 0.5s ease-out forwards;
            }

            .shop-now-btn:hover {
                background-color: #d1404a;
            }

            @keyframes slideIn {
                from {
                    transform: translateY(50px);
                    opacity: 0;
                }
                to {
                    transform: translateY(0);
                    opacity: 1;
                }
            }
            .custom-swal-container {
            font-family: 'Roboto', sans-serif;
        }
        .custom-swal-title {
            color: #3085d6;
            font-size: 24px;
        }
        .custom-swal-text {
            color: #777;
            font-size: 16px;
        }
        .custom-swal-confirm-button {
            background-color: #3085d6;
            color: #fff;
            border: none;
            cursor: pointer;
        }
        .custom-swal-cancel-button {
            background-color: #d33;
            color: #fff;
            border: none;
            cursor: pointer;
        }
            
        .quantity-btn {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 50%;
        cursor: pointer;
        display: inline-block;
        width: 20px;
        height: 20px;
        text-align: center;
        line-height: 20px;
        font-size: 14px;
    }

    .quantity-btn:hover {
        background-color: #f0f0f0;
    }
    .cart {
    position: relative;
    top: -35px; /* Adjust this value as needed */
}
.back-button {
    position: absolute;
    top: 85px;
    left: 80px;
    z-index: 1000; /* Ensure the button is above other elements */
}

.back-button a {
    font-size: 24px; /* Increase the font size of the icon */
    padding: 10px; /* Add some padding around the icon */
    color: #000; /* Adjust the color as needed */
    text-decoration: none;
}

.back-button a:hover {
    color: #333; /* Change the color on hover */
}
    </style>
</head>
<body>

    <%-include('nav2')%>
    
    <div class="back-button">
        <a href="javascript:history.back()"><i class="fas fa-arrow-left"></i></a>
    </div>
    <div class="cart">
        <div class="cart-title">Shopping Cart</div>
        <% if (cart.length === 0) { %>
            <div class="empty-cart-message" style="display: block;">
                Your cart is empty. <a href="/" class="shop-now-btn" style="text-decoration: none;">Shop Now</a>
            </div>
        <% } else { %>
        <table class="cart-table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody class="cart-items">
             <% cart.forEach(item => { %>
    <tr>

        <!-- Display the product image -->
        <td><img src="<%= item.productDetails && item.productDetails.productImages[0] %>" alt="Product Image" class="product-image" /></td>

        <!-- Display the product name -->
        <td><%= item.productDetails && item.productDetails.name %></td>
        <!-- Display the product price -->
        <td>
            <% if (item.productDetails && item.productDetails.price !== null && item.productDetails.price !== undefined) { %>
                <% if (item.productDetails.offerprice !== null && item.productDetails.offerprice !== undefined) { %>
                    ₹<%= Math.min(item.productDetails.offerprice, item.productDetails.price) %>
                <% } else { %>
                    ₹<%= item.productDetails.price %>
                <% } %>
            <% } else { %>
                <!-- Handle the case where price is not available -->
                <span>No Price</span>
            <% } %>
        </td>
        
<td class="quantity-cell">
    <button class="quantity-btn quantity-minus" onclick="decreaseQuantity('<%= item.productDetails._id %>')">
        <i class="fas fa-minus"></i>
    </button>
    <input type="number" class="quantity-input" id="quantity_<%= item.productDetails._id %>" value="<%= item.quantity %>" min="1" max="<%= item.productDetails.stock %>" disabled>
    <button class="quantity-btn quantity-plus" onclick="increaseQuantity('<%= item.productDetails._id %>')">
        <i class="fas fa-plus"></i>
    </button>
</td>

        
<!-- Display the total price for this item -->
<td class="subtotal">₹<%= (item.productDetails.offerprice ? item.productDetails.offerprice : item.productDetails.price) * item.quantity %></td>

        <td>
            <button class="remove-btn" onclick="removeFromCart('<%= item.productDetails._id %>')">Remove</button>
        </td>
        
    </tr>
<% }) %>   
                
                
            </tbody>
        </table>
      
          <% } %>
          <% if (cart.length > 0) { %>
            <div class="cart-footer">
                <div class="total-price">Total: ₹<span class="cart-total"><%= totalPrice.toFixed(2) %></span></div>
                <a href="#" onclick="handleCheckout()"><button class="checkout-btn">Checkout</button></a>
            </div>
        <% } else { %>
            <!-- Optionally, you can display a message or leave this section empty if you don't want to show anything when the cart is empty -->
        <% } %>
        
      

    </div>
    
   >
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>



<script>
    function handleCheckout() {
        const cartTotal = parseFloat(document.querySelector(".cart-total").innerText);
        if (cartTotal === 0) {
            // Display a SweetAlert indicating no product selected
            Swal.fire({
                title: 'Oops!',
                text: 'Please select a product before checking out.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        } else {
            window.location.href = "/checkout";
        }
    }
</script>
    <script>
    // Add validation to check the stock limit
    function updateQuantity(productId) {
    const inputField = document.getElementById(`quantity_${productId}`);
    const newQuantity = parseInt(inputField.value);
    const maxStock = parseInt(inputField.getAttribute('max'));

    // Check if the input is a positive number
    if (isNaN(newQuantity) || newQuantity < 0) {
        // Display an error message or alert
        alert('Quantity must be a positive number.');
        // Reset the input to the previous valid quantity
        inputField.value = inputField.dataset.prevValue || 1;
        return;
    }

    // Check if the input exceeds the stock limit
    if (newQuantity > maxStock) {
        // Display a SweetAlert indicating the maximum stock limit reached
        Swal.fire({
            title: 'Error',
            text: 'Maximum stock limit reached',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        // Reset the input to the maximum stock value
        inputField.value = maxStock;
        return;
    }

    // Send a request to update the quantity to the server
    fetch('/updateQuantity', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, newQuantity }), // Send the productId and newQuantity in the request body
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update the quantity input field with the new quantity
            inputField.value = data.cart.items.find(item => item.productDetails._id === productId).quantity;
            console.log('Quantity updated successfully');
            // Optionally, you might want to update the total price here if needed
        } else {
            console.error('Failed to update quantity');
            if (data.message === 'Product already exists in the cart') {
                // Show a popup indicating that the product already exists
                alert('Product already exists in your cart');
            }
        }
    })
    .catch(error => {
        console.error('Error updating quantity:', error);
    });
}

      

    </script>
    
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const cartItems = document.querySelector(".cart-items");
            const emptyCartMessage = document.querySelector(".empty-cart-message");

            const cartTotal = document.querySelector(".cart-total");
            const quantityInputs = document.querySelectorAll(".quantity-input");
            const removeButtons = document.querySelectorAll(".remove-btn");
            const shopNowBtn = document.querySelector(".shop-now-btn");
            
            function updateTotal() {
        const subtotals = document.querySelectorAll(".subtotal");
        let total = 0;

        subtotals.forEach(subtotal => {
            total += parseFloat(subtotal.innerText.replace('₹', ''));
        });

        const totalPriceElement = document.querySelector(".cart-total");
        totalPriceElement.innerText = total.toFixed(2);
        
    }

    
            // Function to update total price
           
            // Remove button click event
            removeButtons.forEach(function (button) {
        button.addEventListener("click", function () {
            this.closest("tr").remove();
            updateTotal();
            if (cartItems.children.length === 0) {
                emptyCartMessage.style.display = "block";
            }
        });
    });

            // Initially update total
            updateTotal();

            // Shop Now button click event
            shopNowBtn.addEventListener("click", function () {
                // Add your logic to navigate to the shop page
                console.log("Redirecting to shop page...");
            });
        });
        // Modify the removeFromCart function to send a request to the server
        function removeFromCart(productId) {
    // Display a confirmation dialog using SweetAlert
    Swal.fire({
    title: 'Are you sure?',
    text: 'You are about to remove this product from your cart.',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, remove it!',
    cancelButtonText: 'Cancel',
    customClass: {
        container: 'custom-swal-container',
        title: 'custom-swal-title',
        text: 'custom-swal-text',
        confirmButton: 'custom-swal-confirm-button',
        cancelButton: 'custom-swal-cancel-button',
    },
        // You can also add HTML content to customize the dialog further
        // html: '<span style="color: red;">Custom HTML content goes here</span>'
    }).then((result) => {
        if (result.isConfirmed) {
            // If confirmed, send a request to the server to remove the product
            fetch(`/removeFromCart/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            })
            .then(response => {
                if (response.ok) {
                    console.log('Product removed successfully');
                    // Remove the item visually from the cart
                    document.getElementById(`row_${productId}`).remove();
                    // Update the total price
                    updateTotal();
                } else {
                    console.error('Failed to remove product');
                }
            })
            .catch(error => {
                console.error('Error removing product:', error);
            });
        }
    });
}


    </script>
    <script>
        // Function to decrease quantity
function decreaseQuantity(productId) {
    const inputField = document.getElementById(`quantity_${productId}`);
    let newValue = parseInt(inputField.value) - 1;
    newValue = newValue < 1 ? 1 : newValue; // Ensure quantity doesn't go below 1
    inputField.value = newValue;
        
    updateQuantity(productId, newValue); // Call function to update quantity

}

// Function to increase quantity
// Function to increase quantity
function increaseQuantity(productId) {
    const inputField = document.getElementById(`quantity_${productId}`);
    const maxStock = parseInt(inputField.getAttribute('max'));
    let newValue = parseInt(inputField.value) + 1;
    
    // Check if newValue exceeds max stock limit
    if (newValue > maxStock) {
        // Display a SweetAlert indicating the maximum stock limit reached
        Swal.fire({
            title: 'Error',
            text: 'Maximum stock limit reached',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return; // Exit function without updating quantity
    }
    
    // Update quantity if not exceeding max stock limit
    inputField.value = newValue;
    updateQuantity(productId, newValue); // Call function to update quantity
}


    </script>
<script>
    
</script>
</body>
</html>