<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <style>
    body{
  background-color:rgb(245, 245, 245); 
}
.otp-field {
    flex-direction: row;
    column-gap: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .otp-field input {
    height: 45px;
    width: 42px;
    border-radius: 6px;
    outline: none;
    font-size: 1.125rem;
    text-align: center;
    border: 1px solid #ddd;
  }
  .otp-field input:focus {
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
  }
  .otp-field input::-webkit-inner-spin-button,
  .otp-field input::-webkit-outer-spin-button {
    display: none;
  }
  
  .resend {
    font-size: 12px;
  }
  
  .footer {
    position: absolute;
    bottom: 10px;
    right: 10px;
    color: black;
    font-size: 12px;
    text-align: right;
    font-family: monospace;
  }
  
  .footer a {
    color: black;
    text-decoration: none;
  }

  .card{
    margin-top: 150px;
  }
  .hidden {
    display: none !important;
  }
  </style>
  <title>Document</title>
</head>

<body>
  <div id="errorMessageContainer" class="alert alert-danger" role="alert" style="display: none;"></div>
      <form method="post" action="/otp">
        <section>
          <div class="row justify-content-center ">
            <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
              <div class="card bg-white mb-5  border-0" style="box-shadow: 0 12px 15px rgba(0, 0, 0, 0.02);">
                <div class="card-body p-5 text-center">
                  <h4>Verify</h4>
                  <p>Your code was sent to you via email</p>

                  <div class="otp-field mb-4">
                    <input type="number" name="digit1" />
                    <input type="number" name="digit2" disabled />
                    <input type="number" name="digit3" disabled />
                    <input type="number" name="digit4" disabled />
                    <input type="number" name="digit5" disabled />
                    <input type="number" name="digit6" disabled />
                  </div>

                  <button type="submit" class="btn btn-primary mb-3" id="verifyBtn">
                    Verify
                  </button>

                  <p class="resend text-muted mb-0 ">
                    Didn't receive code? <a href="/resendotp" id="resendBtn" onclick="requestAgain()" class="hidden"> Request again</a>
                  </p>
                  <div id="countdown"></div>
                </div>
              </div>
            </div>
          </div>
        </section>
      </form>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>
</body>
<script>
  function startCountdown(durationInSeconds) {
    let duration = durationInSeconds;
    const countdownElement = document.getElementById('countdown');
    const resendButton = document.getElementById('resendBtn');

    function updateCountdown() {
      const minutes = Math.floor(duration / 60);
      const seconds = duration % 60;

      countdownElement.textContent = `${minutes}:${seconds}`;

      if (duration <= 0) {
        clearInterval(countdownInterval);
        // Handle countdown expiration, for example, enable the Resend OTP link
        resendButton.classList.remove('hidden');
        resendButton.style.pointerEvents = 'auto'; // Re-enable click events
        resendButton.href = '/resendotp'; // Set the correct href
      } else {
        duration--;
        resendButton.classList.add('hidden');
        resendButton.style.pointerEvents = 'none'; // Disable click events during countdown
      }
    }

    // Initial call to start the countdown
    updateCountdown();

    // Set up the interval to update the countdown every second
    const countdownInterval = setInterval(updateCountdown, 1000);

    // Return the interval ID to keep track of it
    return countdownInterval;
  }

  // Call startCountdown with the desired duration (60 seconds in this example)
  let intervalId = startCountdown(60);

  // Function to handle "Request again" click
  function requestAgain() {
    clearInterval(intervalId); // Clear the previous countdown interval
    intervalId = startCountdown(60); // Reset the countdown
    resendButton.classList.add('hidden');
  }

  const form = document.querySelector('form');
  const digitInputs = document.querySelectorAll('.otp-field > input');

  form.addEventListener('submit',async function (event) {
    event.preventDefault();

    // Collect OTP values from the input fields and join them
    const otpValue = Array.from(digitInputs).map(input => input.value).join('');

    // Make the fetch request
    const response = await fetch('/verifyotp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ otp: otpValue }),
    })
    const result = await response.json();
    if (result.success) {
        // Redirect to the specified URL
        window.location.href = './login';
    }else{
      const errorMessage = document.getElementById('errorMessageContainer');
      errorMessage.innerHTML = `<p>${result.message}</p>`;
      errorMessage.style.display = 'block';

      // Hide the message after 2 seconds
      setTimeout(() => {
        errorMessage.innerHTML = '';
        errorMessage.style.display = 'none';
      }, 2000);
    }
  });

  const inputs = document.querySelectorAll(".otp-field > input");
  const button = document.querySelector(".btn");

  window.addEventListener("load", () => inputs[0].focus());
  button.setAttribute("disabled", "disabled");

  inputs[0].addEventListener("paste", function (event) {
    event.preventDefault();

    const pastedValue = (event.clipboardData || window.clipboardData).getData("text");
    const otpLength = inputs.length;

    for (let i = 0; i < otpLength; i++) {
      if (i < pastedValue.length) {
        inputs[i].value = pastedValue[i];
        inputs[i].removeAttribute("disabled");
        inputs[i].focus();
      } else {
        inputs[i].value = ""; // Clear any remaining inputs
        inputs[i].focus();
      }
    }
  });

  inputs.forEach((input, index1) => {
    input.addEventListener("keyup", (e) => {
      const currentInput = input;
      const nextInput = input.nextElementSibling;
      const prevInput = input.previousElementSibling;

      if (currentInput.value.length > 1) {
        currentInput.value = "";
        return;
      }

      if (
        nextInput &&
        nextInput.hasAttribute("disabled") &&
        currentInput.value !== ""
      ) {
        nextInput.removeAttribute("disabled");
        nextInput.focus();
      }

      if (e.key === "Backspace") {
        inputs.forEach((input, index2) => {
          if (index1 <= index2 && prevInput) {
            input.setAttribute("disabled", true);
            input.value = "";
            prevInput.focus();
          }
        });
      }

      button.classList.remove("active");
      button.setAttribute("disabled", "disabled");

      const inputsNo = inputs.length;
      if (!inputs[inputsNo - 1].disabled && inputs[inputsNo - 1].value !== "") {
        button.classList.add("active");
        button.removeAttribute("disabled");

        return;
      }
    });
  });
</script>

</html>


<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
      .otp-field {
        flex-direction: row;
        column-gap: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .otp-field input {
        height: 45px;
        width: 42px;
        border-radius: 6px;
        outline: none;
        font-size: 1.125rem;
        text-align: center;
        border: 1px solid #ddd;
      }

      .otp-field input:focus {
        box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
      }

      .otp-field input::-webkit-inner-spin-button,
      .otp-field input::-webkit-outer-spin-button {
        display: none;
      }

      .resend {
        font-size: 12px;
      }

      .footer {
        position: absolute;
        bottom: 10px;
        right: 10px;
        color: black;
        font-size: 12px;
        text-align: right;
        font-family: monospace;
      }

      .footer a {
        color: black;
        text-decoration: none;
      }
    </style>
  </head>
  <body class="container-fluid bg-body-tertiary d-block">
    <div class="row justify-content-center">
      <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
        <form method="post" action="/otp">

          <div class="card bg-white mb-5 mt-5 border-0" style="box-shadow: 0 12px 15px rgba(0, 0, 0, 0.02);">
            <div class="card-body p-5 text-center">
              <h4>Verify</h4>
              <p>Your code was sent to you via email</p>
  
              <div class="otp-field mb-4">
                <input type="number" />
                <input type="number" disabled />
                <input type="number" disabled />
                <input type="number" disabled />
                <input type="number" disabled />
                <input type="number" disabled />
              </div>
  
              
              <button type="submit" id="verifyBtn" class="btn btn-primary mb-3">Verify</button>
              <div>
                <span class="timer">
                  <span id="counter"></span>
                </span>
              </div>
  
              <p class="resend text-muted mb-0">
                Didn't receive code? <a href="#" id="resendLink">Request again</a>
              </p>
            </div>
          </div>
        </form>
        
      </div>
    </div>

    <script>
      var inputs = document.querySelectorAll(".otp-field > input");
      var button = document.getElementById("verifyBtn");
      var resendLink = document.getElementById("resendLink");
      var timerSeconds = 60;

      button.addEventListener("click", function () {
        window.location.href = "./login";
      });

      resendLink.addEventListener("click", function (event) {
        event.preventDefault();
        startTimer();
        // Add logic here to resend the code or trigger a new code generation
      });

      function startTimer() {
        timerSeconds = 60;
        resendLink.setAttribute("disabled", "disabled");
        var timerInterval = setInterval(function () {
          timerSeconds--;
          if (timerSeconds <= 0) {
            clearInterval(timerInterval);
            resendLink.removeAttribute("disabled");
          }
        }, 1000);
      }

      var inputs = document.querySelectorAll(".otp-field > input");
      var button = document.querySelector(".btn");

      window.addEventListener("load", () => inputs[0].focus());
      button.setAttribute("disabled", "disabled");

      inputs[0].addEventListener("paste", function (event) {
        event.preventDefault();

        const pastedValue = (event.clipboardData || window.clipboardData).getData(
          "text"
        );
        const otpLength = inputs.length;

        for (let i = 0; i < otpLength; i++) {
          if (i < pastedValue.length) {
            inputs[i].value = pastedValue[i];
            inputs[i].removeAttribute("disabled");
            inputs[i].focus;
          } else {
            inputs[i].value = ""; // Clear any remaining inputs
            inputs[i].focus;
          }
        }
      });

      inputs.forEach((input, index1) => {
        input.addEventListener("keyup", (e) => {
          const currentInput = input;
          const nextInput = input.nextElementSibling;
          const prevInput = input.previousElementSibling;

          if (currentInput.value.length > 1) {
            currentInput.value = "";
            return;
          }

          if (
            nextInput &&
            nextInput.hasAttribute("disabled") &&
            currentInput.value !== ""
          ) {
            nextInput.removeAttribute("disabled");
            nextInput.focus();
          }

          if (e.key === "Backspace") {
            inputs.forEach((input, index2) => {
              if (index1 <= index2 && prevInput) {
                input.setAttribute("disabled", true);
                input.value = "";
                prevInput.focus();
              }
            });
          }

          button.classList.remove("active");
          button.setAttribute("disabled", "disabled");

          const inputsNo = inputs.length;
          if (!inputs[inputsNo - 1].disabled && inputs[inputsNo - 1].value !== "") {
            button.classList.add("active");
            button.removeAttribute("disabled");

            return;
          }
        });
      });
      function countdown() {
        var seconds = 59;
        function tick() {
          var counter = document.getElementById("counter");
          seconds--;
          counter.innerHTML =
            "0:" + (seconds < 10 ? "0" : "") + String(seconds);
          if (seconds > 0) {
            setTimeout(tick, 1000);
          } else {
            document.getElementById("verifiBtn").innerHTML = `
                <div class="Btn" id="ResendBtn">
                    <button type="submit">Resend</button>
                </div>
            `;
            document.getElementById("counter").innerHTML = "";
          }
        }
        tick();
      }
      countdown();
    </script>

    


<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
      .otp-field {
    flex-direction: row;
    column-gap: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .otp-field input {
    height: 45px;
    width: 42px;
    border-radius: 6px;
    outline: none;
    font-size: 1.125rem;
    text-align: center;
    border: 1px solid #ddd;
  }
  .otp-field input:focus {
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
  }
  .otp-field input::-webkit-inner-spin-button,
  .otp-field input::-webkit-outer-spin-button {
    display: none;
  }
  
  .resend {
    font-size: 12px;
  }
  
  .footer {
    position: absolute;
    bottom: 10px;
    right: 10px;
    color: black;
    font-size: 12px;
    text-align: right;
    font-family: monospace;
  }
  
  .footer a {
    color: black;
    text-decoration: none;
  }
  
    </style>
  </head>
<body class="container-fluid bg-body-tertiary d-block">
  <div class="row justify-content-center">
    <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
      <div class="card bg-white mb-5 mt-5 border-0" style="box-shadow: 0 12px 15px rgba(0, 0, 0, 0.02);">
        <div class="card-body p-5 text-center">
          <h4>Verify</h4>
          <p>Your code was sent to you via email</p>

          <div class="otp-field mb-4">
            <input type="number" />
            <input type="number" disabled />
            <input type="number" disabled />
            <input type="number" disabled />
            <input type="number" disabled />
            <input type="number" disabled />
          </div>

          <button id="verifyBtn" class="btn btn-primary mb-3">Verify</button>

          <p class="resend text-muted mb-0">
            Didn't receive code? <a href="">Request again</a>
          </p>
        </div>
      </div>
    </div>
  </div>

  <script>
    var inputs = document.querySelectorAll(".otp-field > input");
    var button = document.getElementById("verifyBtn");

    // ... your existing script

    button.addEventListener("click", function () {
      // Assuming you have a route in your server for the home page
      // You can adjust the URL accordingly
      window.location.href = "./login";
    });
  </script>
   <script>
    var inputs = document.querySelectorAll(".otp-field > input");
  var button = document.querySelector(".btn");
  
  window.addEventListener("load", () => inputs[0].focus());
  button.setAttribute("disabled", "disabled");
  
  inputs[0].addEventListener("paste", function (event) {
    event.preventDefault();
  
    const pastedValue = (event.clipboardData || window.clipboardData).getData(
      "text"
    );
    const otpLength = inputs.length;
  
    for (let i = 0; i < otpLength; i++) {
      if (i < pastedValue.length) {
        inputs[i].value = pastedValue[i];
        inputs[i].removeAttribute("disabled");
        inputs[i].focus;
      } else {
        inputs[i].value = ""; // Clear any remaining inputs
        inputs[i].focus;
      }
    }
  });
  
  inputs.forEach((input, index1) => {
    input.addEventListener("keyup", (e) => {
      const currentInput = input;
      const nextInput = input.nextElementSibling;
      const prevInput = input.previousElementSibling;
  
      if (currentInput.value.length > 1) {
        currentInput.value = "";
        return;
      }
  
      if (
        nextInput &&
        nextInput.hasAttribute("disabled") &&
        currentInput.value !== ""
      ) {
        nextInput.removeAttribute("disabled");
        nextInput.focus();
      }
  
      if (e.key === "Backspace") {
        inputs.forEach((input, index2) => {
          if (index1 <= index2 && prevInput) {
            input.setAttribute("disabled", true);
            input.value = "";
            prevInput.focus();
          }
        });
      }
  
      button.classList.remove("active");
      button.setAttribute("disabled", "disabled");
  
      const inputsNo = inputs.length;
      if (!inputs[inputsNo - 1].disabled && inputs[inputsNo - 1].value !== "") {
        button.classList.add("active");
        button.removeAttribute("disabled");
  
        return;
      }
    });
  });
  
  </script>



<!-- <!DOCTYPE html>
<html lang="en">
<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .otp-field {
  flex-direction: row;
  column-gap: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.otp-field input {
  height: 45px;
  width: 42px;
  border-radius: 6px;
  outline: none;
  font-size: 1.125rem;
  text-align: center;
  border: 1px solid #ddd;
}
.otp-field input:focus {
  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
}
.otp-field input::-webkit-inner-spin-button,
.otp-field input::-webkit-outer-spin-button {
  display: none;
}

.resend {
  font-size: 12px;
}

.footer {
  position: absolute;
  bottom: 10px;
  right: 10px;
  color: black;
  font-size: 12px;
  text-align: right;
  font-family: monospace;
}

.footer a {
  color: black;
  text-decoration: none;
}

  </style>
</head>
<body class="container-fluid bg-body-tertiary d-block">
  <div class="row justify-content-center">
      <div class="col-12 col-md-6 col-lg-4" style="min-width: 500px;">
        <div class="card bg-white mb-5 mt-5 border-0" style="box-shadow: 0 12px 15px rgba(0, 0, 0, 0.02);">
          <div class="card-body p-5 text-center">
            <h4>Verify</h4>
            <p>Your code was sent to you via email</p>

            <div class="otp-field mb-4">
              <input type="number" />
              <input type="number" disabled />
              <input type="number" disabled />
              <input type="number" disabled />
              <input type="number" disabled />
              <input type="number" disabled />
            </div>

            <button class="btn btn-primary mb-3">
              Verify
            </button>

            <p class="resend text-muted mb-0">
              Didn't receive code? <a href="">Request again</a>
            </p>
          </div>
        </div>
      </div>
    </div>
  <script>
    const inputs = document.querySelectorAll(".otp-field > input");
  const button = document.querySelector(".btn");
  
  window.addEventListener("load", () => inputs[0].focus());
  button.setAttribute("disabled", "disabled");
  
  inputs[0].addEventListener("paste", function (event) {
    event.preventDefault();
  
    const pastedValue = (event.clipboardData || window.clipboardData).getData(
      "text"
    );
    const otpLength = inputs.length;
  
    for (let i = 0; i < otpLength; i++) {
      if (i < pastedValue.length) {
        inputs[i].value = pastedValue[i];
        inputs[i].removeAttribute("disabled");
        inputs[i].focus;
      } else {
        inputs[i].value = ""; // Clear any remaining inputs
        inputs[i].focus;
      }
    }
  });
  
  inputs.forEach((input, index1) => {
    input.addEventListener("keyup", (e) => {
      const currentInput = input;
      const nextInput = input.nextElementSibling;
      const prevInput = input.previousElementSibling;
  
      if (currentInput.value.length > 1) {
        currentInput.value = "";
        return;
      }
  
      if (
        nextInput &&
        nextInput.hasAttribute("disabled") &&
        currentInput.value !== ""
      ) {
        nextInput.removeAttribute("disabled");
        nextInput.focus();
      }
  
      if (e.key === "Backspace") {
        inputs.forEach((input, index2) => {
          if (index1 <= index2 && prevInput) {
            input.setAttribute("disabled", true);
            input.value = "";
            prevInput.focus();
          }
        });
      }
  
      button.classList.remove("active");
      button.setAttribute("disabled", "disabled");
  
      const inputsNo = inputs.length;
      if (!inputs[inputsNo - 1].disabled && inputs[inputsNo - 1].value !== "") {
        button.classList.add("active");
        button.removeAttribute("disabled");
  
        return;
      }
    });
  });
  
  </script>
  	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

</body>

</html> -->

<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .row {
  margin: auto; /* center horizontally */
  
  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  width:100%;
}

input {
  margin: 0.5rem;
  padding: 0.5rem;
  max-width: 2rem;
  text-align: center;
}

/* remove the up/down spinner in number input
   source - https://css-tricks.com/snippets/css/turn-off-number-input-spinners/
*/
input[type=number]::-webkit-inner-spin-button, 
input[type=number]::-webkit-outer-spin-button { 
  -webkit-appearance: none; 
  margin: 0; 
}
    </style>
</head>
<body>
    <div class="row">
        <input id="otp-first" type="number" min="0" max="9" step="1" aria-label="first digit" />
        <input id="otp-second" type="number" min="0" max="9" step="1" aria-label="second digit" />
        <input id="otp-third" type="number" min="0" max="9" step="1" aria-label="third digit" />
        <input id="otp-fourth" type="number" min="0" max="9" step="1" aria-label="fourth digit" />
      </div>
</body>
<script>
    console.clear();
let inputs = document.querySelectorAll("input");
let values = Array(4);
let clipData;
inputs[0].focus();

inputs.forEach((tag, index) => {
  tag.addEventListener('keyup', (event) => {
    if(event.code === "Backspace" && hasNoValue(index)) {
      if(index > 0) inputs[index - 1].focus();
    }
    
    //else if any input move focus to next or out
    else if (tag.value !== "") {
      (index < inputs.length - 1) ? inputs[index + 1].focus() : tag.blur();
    }
    
    //add val to array to track prev vals
    values[index] = event.target.value;
  });
  
  tag.addEventListener('input', () => {
    //replace digit if already exists
    if(tag.value > 10) {
      tag.value = tag.value % 10;
    }
  });
  
  tag.addEventListener('paste', (event) => {
    event.preventDefault();
    clipData = event.clipboardData.getData("text/plain").split('');
    filldata(index);
  })
})

function filldata(index) {
  for(let i = index; i < inputs.length; i++) {
    inputs[i].value = clipData.shift();
  }
}

function hasNoValue(index) {
  if(values[index] || values[index] === 0) 
    return false;
  
  return true;
}
</script>
</html> -->